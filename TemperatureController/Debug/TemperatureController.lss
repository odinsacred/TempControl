
TemperatureController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800060  00800060  000005e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115e  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009a6  00000000  00000000  000021a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  00002d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086e  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
   2:	9f c0       	rjmp	.+318    	; 0x142 <__bad_interrupt>
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	9d c0       	rjmp	.+314    	; 0x142 <__bad_interrupt>
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	9b c0       	rjmp	.+310    	; 0x142 <__bad_interrupt>
   c:	66 c2       	rjmp	.+1228   	; 0x4da <__vector_6>
   e:	99 c0       	rjmp	.+306    	; 0x142 <__bad_interrupt>
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	97 c0       	rjmp	.+302    	; 0x142 <__bad_interrupt>
  14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
  16:	40 c2       	rjmp	.+1152   	; 0x498 <__vector_11>
  18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
  1a:	93 c0       	rjmp	.+294    	; 0x142 <__bad_interrupt>
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	91 c0       	rjmp	.+290    	; 0x142 <__bad_interrupt>
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	8f c0       	rjmp	.+286    	; 0x142 <__bad_interrupt>
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	00 5e       	subi	r16, 0xE0	; 224
  28:	bc e2       	ldi	r27, 0x2C	; 44
  2a:	61 3f       	cpi	r22, 0xF1	; 241
  2c:	dd 83       	std	Y+5, r29	; 0x05
  2e:	c2 9c       	mul	r12, r2
  30:	7e 20       	and	r7, r14
  32:	a3 fd       	sbrc	r26, 3
  34:	1f 41       	sbci	r17, 0x1F	; 31
  36:	9d c3       	rjmp	.+1850   	; 0x772 <_etext+0x1fe>
  38:	21 7f       	andi	r18, 0xF1	; 241
  3a:	fc a2       	std	Y+36, r15	; 0x24
  3c:	40 1e       	adc	r4, r16
  3e:	5f 01       	movw	r10, r30
  40:	e3 bd       	out	0x23, r30	; 35
  42:	3e 60       	ori	r19, 0x0E	; 14
  44:	82 dc       	rcall	.-1788   	; 0xfffff94a <__eeprom_end+0xff7ef94a>
  46:	23 7d       	andi	r18, 0xD3	; 211
  48:	9f c1       	rjmp	.+830    	; 0x388 <main+0x2>
  4a:	42 1c       	adc	r4, r2
  4c:	fe a0       	ldd	r15, Y+38	; 0x26
  4e:	e1 bf       	out	0x31, r30	; 49
  50:	5d 03       	fmul	r21, r21
  52:	80 de       	rcall	.-768    	; 0xfffffd54 <__eeprom_end+0xff7efd54>
  54:	3c 62       	ori	r19, 0x2C	; 44
  56:	be e0       	ldi	r27, 0x0E	; 14
  58:	02 5c       	subi	r16, 0xC2	; 194
  5a:	df 81       	ldd	r29, Y+7	; 0x07
  5c:	63 3d       	cpi	r22, 0xD3	; 211
  5e:	7c 22       	and	r7, r28
  60:	c0 9e       	mul	r12, r16
  62:	1d 43       	sbci	r17, 0x3D	; 61
  64:	a1 ff       	sbrs	r26, 1
  66:	46 18       	sub	r4, r6
  68:	fa a4       	ldd	r15, Y+42	; 0x2a
  6a:	27 79       	andi	r18, 0x97	; 151
  6c:	9b c5       	rjmp	.+2870   	; 0xba4 <_etext+0x630>
  6e:	84 da       	rcall	.-2808   	; 0xfffff578 <__eeprom_end+0xff7ef578>
  70:	38 66       	ori	r19, 0x68	; 104
  72:	e5 bb       	out	0x15, r30	; 21
  74:	59 07       	cpc	r21, r25
  76:	db 85       	ldd	r29, Y+11	; 0x0b
  78:	67 39       	cpi	r22, 0x97	; 151
  7a:	ba e4       	ldi	r27, 0x4A	; 74
  7c:	06 58       	subi	r16, 0x86	; 134
  7e:	19 47       	sbci	r17, 0x79	; 121
  80:	a5 fb       	bst	r26, 5
  82:	78 26       	eor	r7, r24
  84:	c4 9a       	sbi	0x18, 4	; 24
  86:	65 3b       	cpi	r22, 0xB5	; 181
  88:	d9 87       	std	Y+9, r29	; 0x09
  8a:	04 5a       	subi	r16, 0xA4	; 164
  8c:	b8 e6       	ldi	r27, 0x68	; 104
  8e:	a7 f9       	bld	r26, 7
  90:	1b 45       	sbci	r17, 0x5B	; 91
  92:	c6 98       	cbi	0x18, 6	; 24
  94:	7a 24       	eor	r7, r10
  96:	f8 a6       	std	Y+40, r15	; 0x28
  98:	44 1a       	sub	r4, r20
  9a:	99 c7       	rjmp	.+3890   	; 0xfce <_etext+0xa5a>
  9c:	25 7b       	andi	r18, 0xB5	; 181
  9e:	3a 64       	ori	r19, 0x4A	; 74
  a0:	86 d8       	rcall	.-3828   	; 0xfffff1ae <__eeprom_end+0xff7ef1ae>
  a2:	5b 05       	cpc	r21, r11
  a4:	e7 b9       	out	0x07, r30	; 7
  a6:	8c d2       	rcall	.+1304   	; 0x5c0 <_etext+0x4c>
  a8:	30 6e       	ori	r19, 0xE0	; 224
  aa:	ed b3       	in	r30, 0x1d	; 29
  ac:	51 0f       	add	r21, r17
  ae:	4e 10       	cpse	r4, r14
  b0:	f2 ac       	ldd	r15, Z+58	; 0x3a
  b2:	2f 71       	andi	r18, 0x1F	; 31
  b4:	93 cd       	rjmp	.-1242   	; 0xfffffbdc <__eeprom_end+0xff7efbdc>
  b6:	11 4f       	sbci	r17, 0xF1	; 241
  b8:	ad f3       	brhs	.-22     	; 0xa4 <__SREG__+0x65>
  ba:	70 2e       	mov	r7, r16
  bc:	cc 92       	st	X, r12
  be:	d3 8d       	ldd	r29, Z+27	; 0x1b
  c0:	6f 31       	cpi	r22, 0x1F	; 31
  c2:	b2 ec       	ldi	r27, 0xC2	; 194
  c4:	0e 50       	subi	r16, 0x0E	; 14
  c6:	af f1       	brie	.+106    	; 0x132 <__do_clear_bss+0x4>
  c8:	13 4d       	sbci	r17, 0xD3	; 211
  ca:	ce 90       	ld	r12, -X
  cc:	72 2c       	mov	r7, r2
  ce:	6d 33       	cpi	r22, 0x3D	; 61
  d0:	d1 8f       	std	Z+25, r29	; 0x19
  d2:	0c 52       	subi	r16, 0x2C	; 44
  d4:	b0 ee       	ldi	r27, 0xE0	; 224
  d6:	32 6c       	ori	r19, 0xC2	; 194
  d8:	8e d0       	rcall	.+284    	; 0x1f6 <ledShowValue+0x5e>
  da:	53 0d       	add	r21, r3
  dc:	ef b1       	in	r30, 0x0f	; 15
  de:	f0 ae       	std	Z+56, r15	; 0x38
  e0:	4c 12       	cpse	r4, r28
  e2:	91 cf       	rjmp	.-222    	; 0x6 <__FUSE_REGION_LENGTH__+0x3>
  e4:	2d 73       	andi	r18, 0x3D	; 61
  e6:	ca 94       	dec	r12
  e8:	76 28       	or	r7, r6
  ea:	ab f5       	brvc	.+106    	; 0x156 <sendByte+0x2>
  ec:	17 49       	sbci	r17, 0x97	; 151
  ee:	08 56       	subi	r16, 0x68	; 104
  f0:	b4 ea       	ldi	r27, 0xA4	; 164
  f2:	69 37       	cpi	r22, 0x79	; 121
  f4:	d5 8b       	std	Z+21, r29	; 0x15
  f6:	57 09       	sbc	r21, r7
  f8:	eb b5       	in	r30, 0x2b	; 43
  fa:	36 68       	ori	r19, 0x86	; 134
  fc:	8a d4       	rcall	.+2324   	; 0xa12 <_etext+0x49e>
  fe:	95 cb       	rjmp	.-2262   	; 0xfffff82a <__eeprom_end+0xff7ef82a>
 100:	29 77       	andi	r18, 0x79	; 121
 102:	f4 aa       	std	Z+52, r15	; 0x34
 104:	48 16       	cp	r4, r24
 106:	e9 b7       	in	r30, 0x39	; 57
 108:	55 0b       	sbc	r21, r21
 10a:	88 d6       	rcall	.+3344   	; 0xe1c <_etext+0x8a8>
 10c:	34 6a       	ori	r19, 0xA4	; 164
 10e:	2b 75       	andi	r18, 0x5B	; 91
 110:	97 c9       	rjmp	.-3282   	; 0xfffff440 <__eeprom_end+0xff7ef440>
 112:	4a 14       	cp	r4, r10
 114:	f6 a8       	ldd	r15, Z+54	; 0x36
 116:	74 2a       	or	r7, r20
 118:	c8 96       	adiw	r24, 0x38	; 56
 11a:	15 4b       	sbci	r17, 0xB5	; 181
 11c:	a9 f7       	brne	.-22     	; 0x108 <__stack+0x29>
 11e:	b6 e8       	ldi	r27, 0x86	; 134
 120:	0a 54       	subi	r16, 0x4A	; 74
 122:	d7 89       	ldd	r29, Z+23	; 0x17
 124:	6b 35       	cpi	r22, 0x5B	; 91

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf ed       	ldi	r28, 0xDF	; 223
 12c:	cd bf       	out	0x3d, r28	; 61

0000012e <__do_clear_bss>:
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	a0 e6       	ldi	r26, 0x60	; 96
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
 136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
 138:	ae 36       	cpi	r26, 0x6E	; 110
 13a:	b2 07       	cpc	r27, r18
 13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
 13e:	23 d1       	rcall	.+582    	; 0x386 <main>
 140:	17 c2       	rjmp	.+1070   	; 0x570 <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <spiInit>:
 void decodeModeOn(){
	 sendPacket(0b00001001, 0b00000111);
 }
 
 void decodeModeOff(){
	  sendPacket(0b00001001, 0b00000000);
 144:	87 b3       	in	r24, 0x17	; 23
 146:	80 6d       	ori	r24, 0xD0	; 208
 148:	87 bb       	out	0x17, r24	; 23
 14a:	bd 98       	cbi	0x17, 5	; 23
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8f 72       	andi	r24, 0x2F	; 47
 150:	88 bb       	out	0x18, r24	; 24
 152:	08 95       	ret

00000154 <sendByte>:
 154:	8f b9       	out	0x0f, r24	; 15
 156:	76 9a       	sbi	0x0e, 6	; 14
 158:	76 99       	sbic	0x0e, 6	; 14
 15a:	09 c0       	rjmp	.+18     	; 0x16e <sendByte+0x1a>
 15c:	8d b1       	in	r24, 0x0d	; 13
 15e:	8b 61       	ori	r24, 0x1B	; 27
 160:	8d b9       	out	0x0d, r24	; 13
 162:	8d e0       	ldi	r24, 0x0D	; 13
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <sendByte+0x10>
 168:	00 00       	nop
 16a:	76 9b       	sbis	0x0e, 6	; 14
 16c:	f7 cf       	rjmp	.-18     	; 0x15c <sendByte+0x8>
 16e:	08 95       	ret

00000170 <sendPacket>:
 170:	cf 93       	push	r28
 172:	c6 2f       	mov	r28, r22
 174:	92 98       	cbi	0x12, 2	; 18
 176:	ee df       	rcall	.-36     	; 0x154 <sendByte>
 178:	8c 2f       	mov	r24, r28
 17a:	ec df       	rcall	.-40     	; 0x154 <sendByte>
 17c:	92 9a       	sbi	0x12, 2	; 18
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <ledInit>:
	  sendPacket(INFO_POS, code);
  }


 void ledInit(){
	spiInit();
 182:	e0 df       	rcall	.-64     	; 0x144 <spiInit>
  void displayTestOff(){
	  sendPacket(0b00001111, 0b00000000);
  }

 void decodeModeOn(){
	 sendPacket(0b00001001, 0b00000111);
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	89 e0       	ldi	r24, 0x09	; 9
 188:	f3 df       	rcall	.-26     	; 0x170 <sendPacket>
 void decodeModeOff(){
	  sendPacket(0b00001001, 0b00000000);
 }

 void setScanLimit(){
	 sendPacket(0b00001011, 0b00000011);
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	8b e0       	ldi	r24, 0x0B	; 11
 18e:	f0 df       	rcall	.-32     	; 0x170 <sendPacket>
  void shutdownModeOn(){
	  sendPacket(0b00001100,0b00000000); //shutdown on
  }

 void shutdownModeOff(){
	 sendPacket(0b00001100,0b00000001); //shutdown off
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	ed df       	rcall	.-38     	; 0x170 <sendPacket>
 196:	08 95       	ret

00000198 <ledShowValue>:
 void showDigit(char digit, char pos){
	sendPacket(pos, digit);
 }


 void ledShowValue(char value, char symbol){
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	38 2f       	mov	r19, r24
 1a0:	d6 2f       	mov	r29, r22
	char hundreds = value/100;
 1a2:	64 e6       	ldi	r22, 0x64	; 100
 1a4:	b2 d1       	rcall	.+868    	; 0x50a <__udivmodqi4>
 1a6:	28 2f       	mov	r18, r24
	char decs = (value - (hundreds*100))/10;
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	48 0f       	add	r20, r24
 1b6:	59 1f       	adc	r21, r25
 1b8:	ca 01       	movw	r24, r20
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	48 0f       	add	r20, r24
 1c4:	59 1f       	adc	r21, r25
 1c6:	44 0f       	add	r20, r20
 1c8:	55 1f       	adc	r21, r21
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	83 2f       	mov	r24, r19
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	84 1b       	sub	r24, r20
 1d4:	95 0b       	sbc	r25, r21
 1d6:	6a e0       	ldi	r22, 0x0A	; 10
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	a3 d1       	rcall	.+838    	; 0x522 <__divmodhi4>
 1dc:	16 2f       	mov	r17, r22
	char units = (value - (hundreds*100) - decs*10);	
 1de:	82 2f       	mov	r24, r18
 1e0:	88 0f       	add	r24, r24
 1e2:	88 0f       	add	r24, r24
 1e4:	82 0f       	add	r24, r18
 1e6:	c8 2f       	mov	r28, r24
 1e8:	c2 95       	swap	r28
 1ea:	cc 0f       	add	r28, r28
 1ec:	c0 7e       	andi	r28, 0xE0	; 224
 1ee:	c8 1b       	sub	r28, r24
 1f0:	c2 0f       	add	r28, r18
 1f2:	c3 0f       	add	r28, r19
 1f4:	96 2f       	mov	r25, r22
 1f6:	92 95       	swap	r25
 1f8:	99 0f       	add	r25, r25
 1fa:	90 7e       	andi	r25, 0xE0	; 224
 1fc:	96 1b       	sub	r25, r22
 1fe:	99 0f       	add	r25, r25
 200:	99 0f       	add	r25, r25
 202:	96 1b       	sub	r25, r22
 204:	99 0f       	add	r25, r25
 206:	c9 0f       	add	r28, r25
	setScanLimit();
	shutdownModeOff();
 }

 void showDigit(char digit, char pos){
	sendPacket(pos, digit);
 208:	62 2f       	mov	r22, r18
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	b1 df       	rcall	.-158    	; 0x170 <sendPacket>
 20e:	61 2f       	mov	r22, r17
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	ae df       	rcall	.-164    	; 0x170 <sendPacket>
 214:	6c 2f       	mov	r22, r28
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	ab df       	rcall	.-170    	; 0x170 <sendPacket>
 void setScanLimit(){
	 sendPacket(0b00001011, 0b00000011);
 }

  void showSymbol(char code){
	  sendPacket(INFO_POS, code);
 21a:	6d 2f       	mov	r22, r29
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	a8 df       	rcall	.-176    	; 0x170 <sendPacket>
	char units = (value - (hundreds*100) - decs*10);	
	showDigit(hundreds,1);
	showDigit(decs,2);
	showDigit(units,3);
	showSymbol(symbol);
 }
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	08 95       	ret

00000228 <init_ds18b20>:
 

// Start transaction with 1-wire line.
void init_ds18b20(void)
{ 
	DQ_OUT;
 228:	b8 9a       	sbi	0x17, 0	; 23
	C_DQ ;
 22a:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	8f ea       	ldi	r24, 0xAF	; 175
 22e:	94 e0       	ldi	r25, 0x04	; 4
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <init_ds18b20+0x8>
 234:	00 c0       	rjmp	.+0      	; 0x236 <init_ds18b20+0xe>
 236:	00 00       	nop
	_delay_us(600);
	S_DQ;
 238:	c0 9a       	sbi	0x18, 0	; 24
 23a:	95 e8       	ldi	r25, 0x85	; 133
 23c:	9a 95       	dec	r25
 23e:	f1 f7       	brne	.-4      	; 0x23c <init_ds18b20+0x14>
 240:	00 00       	nop
	_delay_us(50);
	DQ_IN;
 242:	b8 98       	cbi	0x17, 0	; 23
	while(DQ);
 244:	b0 99       	sbic	0x16, 0	; 22
 246:	fe cf       	rjmp	.-4      	; 0x244 <init_ds18b20+0x1c>
 248:	8f ed       	ldi	r24, 0xDF	; 223
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <init_ds18b20+0x24>
 250:	00 c0       	rjmp	.+0      	; 0x252 <init_ds18b20+0x2a>
 252:	00 00       	nop
	_delay_us(240);
	DQ_OUT;
 254:	b8 9a       	sbi	0x17, 0	; 23
	S_DQ;
 256:	c0 9a       	sbi	0x18, 0	; 24
 258:	87 e5       	ldi	r24, 0x57	; 87
 25a:	92 e0       	ldi	r25, 0x02	; 2
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <init_ds18b20+0x34>
 260:	00 c0       	rjmp	.+0      	; 0x262 <init_ds18b20+0x3a>
 262:	00 00       	nop
 264:	08 95       	ret

00000266 <readbyte>:

// Read a byte from the sensor
uchar readbyte(void)
{ 
	uchar i = 0,data = 0;
	DQ_OUT;
 266:	b8 9a       	sbi	0x17, 0	; 23
 268:	98 e0       	ldi	r25, 0x08	; 8


// Read a byte from the sensor
uchar readbyte(void)
{ 
	uchar i = 0,data = 0;
 26a:	80 e0       	ldi	r24, 0x00	; 0
	DQ_OUT;
	for (i=8; i>0; --i)
	{ C_DQ ;
 26c:	c0 98       	cbi	0x18, 0	; 24
		data >>= 1;
 26e:	86 95       	lsr	r24
 270:	28 e0       	ldi	r18, 0x08	; 8
 272:	2a 95       	dec	r18
 274:	f1 f7       	brne	.-4      	; 0x272 <readbyte+0xc>
		_delay_us(3);
		S_DQ;
 276:	c0 9a       	sbi	0x18, 0	; 24
		DQ_IN;
 278:	b8 98       	cbi	0x17, 0	; 23
 27a:	20 e2       	ldi	r18, 0x20	; 32
 27c:	2a 95       	dec	r18
 27e:	f1 f7       	brne	.-4      	; 0x27c <readbyte+0x16>
		_delay_us(12);
		if(DQ)
 280:	b0 99       	sbic	0x16, 0	; 22
		data |= 0x80;
 282:	80 68       	ori	r24, 0x80	; 128
		DQ_OUT;
 284:	b8 9a       	sbi	0x17, 0	; 23
		S_DQ;
 286:	c0 9a       	sbi	0x18, 0	; 24
 288:	28 e7       	ldi	r18, 0x78	; 120
 28a:	2a 95       	dec	r18
 28c:	f1 f7       	brne	.-4      	; 0x28a <readbyte+0x24>
 28e:	2d e0       	ldi	r18, 0x0D	; 13
 290:	2a 95       	dec	r18
 292:	f1 f7       	brne	.-4      	; 0x290 <readbyte+0x2a>
 294:	00 00       	nop
 296:	91 50       	subi	r25, 0x01	; 1
// Read a byte from the sensor
uchar readbyte(void)
{ 
	uchar i = 0,data = 0;
	DQ_OUT;
	for (i=8; i>0; --i)
 298:	49 f7       	brne	.-46     	; 0x26c <readbyte+0x6>
		S_DQ;
		_delay_us(45);
		_delay_us(5);
	}
	return(data);
}
 29a:	08 95       	ret

0000029c <writecommand>:

// Write a command to the sensor
void writecommand(uchar data)
{ uchar  i;
 29c:	98 e0       	ldi	r25, 0x08	; 8
	for(i=8; i>0; --i)
	{ C_DQ;
 29e:	c0 98       	cbi	0x18, 0	; 24
 2a0:	28 e2       	ldi	r18, 0x28	; 40
 2a2:	2a 95       	dec	r18
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <writecommand+0x6>
		_delay_us(15);
		if(data & 0x01)
 2a6:	80 ff       	sbrs	r24, 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <writecommand+0x12>
		S_DQ;
 2aa:	c0 9a       	sbi	0x18, 0	; 24
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <writecommand+0x14>
		else
		C_DQ;
 2ae:	c0 98       	cbi	0x18, 0	; 24
 2b0:	28 e7       	ldi	r18, 0x78	; 120
 2b2:	2a 95       	dec	r18
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <writecommand+0x16>
		_delay_us(45);
		data >>= 1;
 2b6:	86 95       	lsr	r24
		S_DQ;
 2b8:	c0 9a       	sbi	0x18, 0	; 24
 2ba:	25 e0       	ldi	r18, 0x05	; 5
 2bc:	2a 95       	dec	r18
 2be:	f1 f7       	brne	.-4      	; 0x2bc <writecommand+0x20>
 2c0:	00 00       	nop
 2c2:	91 50       	subi	r25, 0x01	; 1
}

// Write a command to the sensor
void writecommand(uchar data)
{ uchar  i;
	for(i=8; i>0; --i)
 2c4:	61 f7       	brne	.-40     	; 0x29e <writecommand+0x2>
		_delay_us(45);
		data >>= 1;
		S_DQ;
		_delay_us(2);
	}
}
 2c6:	08 95       	ret

000002c8 <getTemp>:

uchar getTemp(){	
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
// Read value from the sensor
inline uchar readtemp(void)
{ 
    uint t = 0;

	init_ds18b20();
 2cc:	ad df       	rcall	.-166    	; 0x228 <init_ds18b20>
	// Convert
	writecommand(SKIP_ROM);
 2ce:	8c ec       	ldi	r24, 0xCC	; 204
 2d0:	e5 df       	rcall	.-54     	; 0x29c <writecommand>
	writecommand(TEMP_MEASURE);
 2d2:	84 e4       	ldi	r24, 0x44	; 68
 2d4:	e3 df       	rcall	.-58     	; 0x29c <writecommand>
	init_ds18b20();
 2d6:	a8 df       	rcall	.-176    	; 0x228 <init_ds18b20>
	// Read Scratch memory area
	writecommand(SKIP_ROM);
 2d8:	8c ec       	ldi	r24, 0xCC	; 204
 2da:	e0 df       	rcall	.-64     	; 0x29c <writecommand>
	writecommand(READ_SCRATCHPAD);
 2dc:	8e eb       	ldi	r24, 0xBE	; 190
 2de:	de df       	rcall	.-68     	; 0x29c <writecommand>
	memory[0] = readbyte(); //LSB
 2e0:	c2 df       	rcall	.-124    	; 0x266 <readbyte>
 2e2:	c1 e6       	ldi	r28, 0x61	; 97
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	88 83       	st	Y, r24
	memory[1] = readbyte(); //MSB
 2e8:	be df       	rcall	.-132    	; 0x266 <readbyte>
 2ea:	89 83       	std	Y+1, r24	; 0x01
	memory[2] = readbyte();
 2ec:	bc df       	rcall	.-136    	; 0x266 <readbyte>
 2ee:	8a 83       	std	Y+2, r24	; 0x02
	memory[3] = readbyte();
 2f0:	ba df       	rcall	.-140    	; 0x266 <readbyte>
 2f2:	8b 83       	std	Y+3, r24	; 0x03
	memory[4] = readbyte();
 2f4:	b8 df       	rcall	.-144    	; 0x266 <readbyte>
 2f6:	8c 83       	std	Y+4, r24	; 0x04
	memory[5] = readbyte();
 2f8:	b6 df       	rcall	.-148    	; 0x266 <readbyte>
 2fa:	8d 83       	std	Y+5, r24	; 0x05
	memory[6] = readbyte();
 2fc:	b4 df       	rcall	.-152    	; 0x266 <readbyte>
 2fe:	8e 83       	std	Y+6, r24	; 0x06
	memory[7] = readbyte();
 300:	b2 df       	rcall	.-156    	; 0x266 <readbyte>
 302:	8f 83       	std	Y+7, r24	; 0x07
	memory[8] = readbyte();
 304:	b0 df       	rcall	.-160    	; 0x266 <readbyte>
 306:	88 87       	std	Y+8, r24	; 0x08
 308:	ab e6       	ldi	r26, 0x6B	; 107
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	22 e6       	ldi	r18, 0x62	; 98
 30e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return(t);
}

uchar checkSum(uchar data[], uchar length){
	uchar crc = 0x00; // init
 310:	e0 e0       	ldi	r30, 0x00	; 0
	uchar temp = 0;
	for(uchar i = length; i>0; --i){
		temp = crc^data[i];
		crc>>=8;
		crc^=crc_table[temp];
 312:	8e 91       	ld	r24, -X
 314:	e8 27       	eor	r30, r24
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	ea 5d       	subi	r30, 0xDA	; 218
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	e0 81       	ld	r30, Z
}

uchar checkSum(uchar data[], uchar length){
	uchar crc = 0x00; // init
	uchar temp = 0;
	for(uchar i = length; i>0; --i){
 31e:	a2 17       	cp	r26, r18
 320:	b3 07       	cpc	r27, r19
 322:	b9 f7       	brne	.-18     	; 0x312 <getTemp+0x4a>
	memory[4] = readbyte();
	memory[5] = readbyte();
	memory[6] = readbyte();
	memory[7] = readbyte();
	memory[8] = readbyte();
	if(checkSum(memory,MEMORY_LENGTH)==0){
 324:	e1 11       	cpse	r30, r1
 326:	0f c0       	rjmp	.+30     	; 0x346 <getTemp+0x7e>
		t = memory[1];
 328:	e1 e6       	ldi	r30, 0x61	; 97
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	81 81       	ldd	r24, Z+1	; 0x01
 32e:	90 e0       	ldi	r25, 0x00	; 0
		t <<= 8;
 330:	98 2f       	mov	r25, r24
 332:	88 27       	eor	r24, r24
		t = t|memory[0];
 334:	20 81       	ld	r18, Z
 336:	82 2b       	or	r24, r18
		t>>=4;
		return(t);
 338:	92 95       	swap	r25
 33a:	82 95       	swap	r24
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	89 27       	eor	r24, r25
 340:	9f 70       	andi	r25, 0x0F	; 15
 342:	89 27       	eor	r24, r25
 344:	01 c0       	rjmp	.+2      	; 0x348 <getTemp+0x80>
	}
	return(t);
 346:	80 e0       	ldi	r24, 0x00	; 0
	}
}

uchar getTemp(){	
	return readtemp();
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <timer0Init>:


void initPinChangeInterrupts(){
	GIMSK |= 1<<PCIE0; 
	PCMSK |= 1<<PCINT1|1<<PCINT2|1<<PCINT3|1<<PCINT4;
	sei();
 34e:	83 b5       	in	r24, 0x23	; 35
 350:	81 60       	ori	r24, 0x01	; 1
 352:	83 bd       	out	0x23, r24	; 35
 354:	89 b7       	in	r24, 0x39	; 57
 356:	82 60       	ori	r24, 0x02	; 2
 358:	89 bf       	out	0x39, r24	; 57
 35a:	83 b7       	in	r24, 0x33	; 51
 35c:	85 60       	ori	r24, 0x05	; 5
 35e:	83 bf       	out	0x33, r24	; 51
 360:	08 95       	ret

00000362 <init>:
 362:	f8 94       	cli
 364:	17 ba       	out	0x17, r1	; 23
 366:	18 ba       	out	0x18, r1	; 24
 368:	81 b3       	in	r24, 0x11	; 17
 36a:	84 62       	ori	r24, 0x24	; 36
 36c:	81 bb       	out	0x11, r24	; 17
 36e:	92 9a       	sbi	0x12, 2	; 18
 370:	8b b7       	in	r24, 0x3b	; 59
 372:	80 62       	ori	r24, 0x20	; 32
 374:	8b bf       	out	0x3b, r24	; 59
 376:	80 b5       	in	r24, 0x20	; 32
 378:	8e 61       	ori	r24, 0x1E	; 30
 37a:	80 bd       	out	0x20, r24	; 32
 37c:	78 94       	sei
 37e:	01 df       	rcall	.-510    	; 0x182 <ledInit>
 380:	e6 df       	rcall	.-52     	; 0x34e <timer0Init>
 382:	78 94       	sei
 384:	08 95       	ret

00000386 <main>:
 386:	8e e1       	ldi	r24, 0x1E	; 30
 388:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <settingTemp>
 38c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <state>
 390:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temperature>
 394:	e6 df       	rcall	.-52     	; 0x362 <init>
 396:	c1 e0       	ldi	r28, 0x01	; 1
 398:	12 e0       	ldi	r17, 0x02	; 2
 39a:	d3 e0       	ldi	r29, 0x03	; 3
 39c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <state>
 3a0:	82 30       	cpi	r24, 0x02	; 2
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <main+0x20>
 3a4:	4d c0       	rjmp	.+154    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3a6:	28 f4       	brcc	.+10     	; 0x3b2 <main+0x2c>
 3a8:	88 23       	and	r24, r24
 3aa:	51 f0       	breq	.+20     	; 0x3c0 <main+0x3a>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	f1 f0       	breq	.+60     	; 0x3ec <main+0x66>
 3b0:	f7 cf       	rjmp	.-18     	; 0x3a0 <main+0x1a>
 3b2:	83 30       	cpi	r24, 0x03	; 3
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <main+0x32>
 3b6:	53 c0       	rjmp	.+166    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	09 f4       	brne	.+2      	; 0x3be <main+0x38>
 3bc:	67 c0       	rjmp	.+206    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 3be:	f0 cf       	rjmp	.-32     	; 0x3a0 <main+0x1a>
 3c0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 3c4:	82 ff       	sbrs	r24, 2
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <main+0x4c>
 3c8:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <state>
 3cc:	8b 7f       	andi	r24, 0xFB	; 251
 3ce:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
 3d2:	63 e6       	ldi	r22, 0x63	; 99
 3d4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temperature>
 3d8:	df de       	rcall	.-578    	; 0x198 <ledShowValue>
 3da:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temperature>
 3de:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <settingTemp>
 3e2:	89 17       	cp	r24, r25
 3e4:	d8 f6       	brcc	.-74     	; 0x39c <main+0x16>
 3e6:	10 93 6c 00 	sts	0x006C, r17	; 0x80006c <state>
 3ea:	d8 cf       	rjmp	.-80     	; 0x39c <main+0x16>
 3ec:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 3f0:	80 ff       	sbrs	r24, 0
 3f2:	0a c0       	rjmp	.+20     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <settingTemp>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <settingTemp>
 3fe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 402:	8e 7f       	andi	r24, 0xFE	; 254
 404:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
 408:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 40c:	81 ff       	sbrs	r24, 1
 40e:	0a c0       	rjmp	.+20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 410:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <settingTemp>
 414:	81 50       	subi	r24, 0x01	; 1
 416:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <settingTemp>
 41a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 41e:	8d 7f       	andi	r24, 0xFD	; 253
 420:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
 424:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 428:	82 ff       	sbrs	r24, 2
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <state>
 430:	8b 7f       	andi	r24, 0xFB	; 251
 432:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
 436:	6d e1       	ldi	r22, 0x1D	; 29
 438:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <settingTemp>
 43c:	ad de       	rcall	.-678    	; 0x198 <ledShowValue>
 43e:	ae cf       	rjmp	.-164    	; 0x39c <main+0x16>
 440:	95 9a       	sbi	0x12, 5	; 18
 442:	67 e7       	ldi	r22, 0x77	; 119
 444:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temperature>
 448:	a7 de       	rcall	.-690    	; 0x198 <ledShowValue>
 44a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 44e:	82 ff       	sbrs	r24, 2
 450:	a5 cf       	rjmp	.-182    	; 0x39c <main+0x16>
 452:	d0 93 6c 00 	sts	0x006C, r29	; 0x80006c <state>
 456:	8b 7f       	andi	r24, 0xFB	; 251
 458:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
 45c:	9f cf       	rjmp	.-194    	; 0x39c <main+0x16>
 45e:	95 98       	cbi	0x12, 5	; 18
 460:	67 e7       	ldi	r22, 0x77	; 119
 462:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temperature>
 466:	98 de       	rcall	.-720    	; 0x198 <ledShowValue>
 468:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temperature>
 46c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <settingTemp>
 470:	98 17       	cp	r25, r24
 472:	10 f4       	brcc	.+4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 474:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <state>
 478:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 47c:	82 ff       	sbrs	r24, 2
 47e:	8e cf       	rjmp	.-228    	; 0x39c <main+0x16>
 480:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <state>
 484:	8b 7f       	andi	r24, 0xFB	; 251
 486:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
 48a:	88 cf       	rjmp	.-240    	; 0x39c <main+0x16>
 48c:	1d df       	rcall	.-454    	; 0x2c8 <getTemp>
 48e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temperature>
 492:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <state>
 496:	82 cf       	rjmp	.-252    	; 0x39c <main+0x16>

00000498 <__vector_11>:
}



ISR(PCINT_vect){
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	8f 93       	push	r24
	if(PINB & UP){
 4a4:	b1 9b       	sbis	0x16, 1	; 22
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__vector_11+0x1a>
		tasks.up = 1;
 4a8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
	}
	if(PINB & DOWN){
 4b2:	b2 9b       	sbis	0x16, 2	; 22
 4b4:	05 c0       	rjmp	.+10     	; 0x4c0 <__vector_11+0x28>
		tasks.down = 1;
 4b6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
	}
	if(PINB & SET){
 4c0:	b3 9b       	sbis	0x16, 3	; 22
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__vector_11+0x36>
		tasks.set = 1;
 4c4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <tasks>
 4c8:	84 60       	ori	r24, 0x04	; 4
 4ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <tasks>
	}
	//if(PINB & RESET){
		//tasks.reset = 1;
	//}
}
 4ce:	8f 91       	pop	r24
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <__vector_6>:

unsigned char clc = 0;
ISR(TIMER0_OVF_vect	){	
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	8f 93       	push	r24
++clc;
 4e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
 4ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
if(clc == 5){
 4f0:	85 30       	cpi	r24, 0x05	; 5
 4f2:	29 f4       	brne	.+10     	; 0x4fe <__vector_6+0x24>
	state = poll;
 4f4:	84 e0       	ldi	r24, 0x04	; 4
 4f6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <state>
	clc=0;
 4fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
 4fe:	8f 91       	pop	r24
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <__udivmodqi4>:
 50a:	99 1b       	sub	r25, r25
 50c:	79 e0       	ldi	r23, 0x09	; 9
 50e:	04 c0       	rjmp	.+8      	; 0x518 <__udivmodqi4_ep>

00000510 <__udivmodqi4_loop>:
 510:	99 1f       	adc	r25, r25
 512:	96 17       	cp	r25, r22
 514:	08 f0       	brcs	.+2      	; 0x518 <__udivmodqi4_ep>
 516:	96 1b       	sub	r25, r22

00000518 <__udivmodqi4_ep>:
 518:	88 1f       	adc	r24, r24
 51a:	7a 95       	dec	r23
 51c:	c9 f7       	brne	.-14     	; 0x510 <__udivmodqi4_loop>
 51e:	80 95       	com	r24
 520:	08 95       	ret

00000522 <__divmodhi4>:
 522:	97 fb       	bst	r25, 7
 524:	07 2e       	mov	r0, r23
 526:	16 f4       	brtc	.+4      	; 0x52c <__divmodhi4+0xa>
 528:	00 94       	com	r0
 52a:	06 d0       	rcall	.+12     	; 0x538 <__divmodhi4_neg1>
 52c:	77 fd       	sbrc	r23, 7
 52e:	08 d0       	rcall	.+16     	; 0x540 <__divmodhi4_neg2>
 530:	0b d0       	rcall	.+22     	; 0x548 <__udivmodhi4>
 532:	07 fc       	sbrc	r0, 7
 534:	05 d0       	rcall	.+10     	; 0x540 <__divmodhi4_neg2>
 536:	3e f4       	brtc	.+14     	; 0x546 <__divmodhi4_exit>

00000538 <__divmodhi4_neg1>:
 538:	90 95       	com	r25
 53a:	81 95       	neg	r24
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	08 95       	ret

00000540 <__divmodhi4_neg2>:
 540:	70 95       	com	r23
 542:	61 95       	neg	r22
 544:	7f 4f       	sbci	r23, 0xFF	; 255

00000546 <__divmodhi4_exit>:
 546:	08 95       	ret

00000548 <__udivmodhi4>:
 548:	aa 1b       	sub	r26, r26
 54a:	bb 1b       	sub	r27, r27
 54c:	51 e1       	ldi	r21, 0x11	; 17
 54e:	07 c0       	rjmp	.+14     	; 0x55e <__udivmodhi4_ep>

00000550 <__udivmodhi4_loop>:
 550:	aa 1f       	adc	r26, r26
 552:	bb 1f       	adc	r27, r27
 554:	a6 17       	cp	r26, r22
 556:	b7 07       	cpc	r27, r23
 558:	10 f0       	brcs	.+4      	; 0x55e <__udivmodhi4_ep>
 55a:	a6 1b       	sub	r26, r22
 55c:	b7 0b       	sbc	r27, r23

0000055e <__udivmodhi4_ep>:
 55e:	88 1f       	adc	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	5a 95       	dec	r21
 564:	a9 f7       	brne	.-22     	; 0x550 <__udivmodhi4_loop>
 566:	80 95       	com	r24
 568:	90 95       	com	r25
 56a:	bc 01       	movw	r22, r24
 56c:	cd 01       	movw	r24, r26
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
