
TemperatureController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000600  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  00000674  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101d  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000875  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000877  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000716  00000000  00000000  00002f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000363d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	72 c1       	rjmp	.+740    	; 0x2fc <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	af 36       	cpi	r26, 0x6F	; 111
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	0d d1       	rcall	.+538    	; 0x25a <main>
  40:	dd c2       	rjmp	.+1466   	; 0x5fc <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <spiInit>:
	setScanLimit();
	shutdownModeOff();
 }

 void showDigit(char digit, char pos){
	sendPacket(pos, digit);
  44:	87 b3       	in	r24, 0x17	; 23
  46:	80 6d       	ori	r24, 0xD0	; 208
  48:	87 bb       	out	0x17, r24	; 23
  4a:	bd 98       	cbi	0x17, 5	; 23
  4c:	88 b3       	in	r24, 0x18	; 24
  4e:	8f 72       	andi	r24, 0x2F	; 47
  50:	88 bb       	out	0x18, r24	; 24
  52:	08 95       	ret

00000054 <sendByte>:
  54:	8f b9       	out	0x0f, r24	; 15
  56:	76 9a       	sbi	0x0e, 6	; 14
  58:	76 99       	sbic	0x0e, 6	; 14
  5a:	09 c0       	rjmp	.+18     	; 0x6e <sendByte+0x1a>
  5c:	8d b1       	in	r24, 0x0d	; 13
  5e:	8b 61       	ori	r24, 0x1B	; 27
  60:	8d b9       	out	0x0d, r24	; 13
  62:	8d e0       	ldi	r24, 0x0D	; 13
  64:	8a 95       	dec	r24
  66:	f1 f7       	brne	.-4      	; 0x64 <sendByte+0x10>
  68:	00 00       	nop
  6a:	76 9b       	sbis	0x0e, 6	; 14
  6c:	f7 cf       	rjmp	.-18     	; 0x5c <sendByte+0x8>
  6e:	08 95       	ret

00000070 <sendPacket>:
  70:	cf 93       	push	r28
  72:	c6 2f       	mov	r28, r22
  74:	92 98       	cbi	0x12, 2	; 18
  76:	ee df       	rcall	.-36     	; 0x54 <sendByte>
  78:	8c 2f       	mov	r24, r28
  7a:	ec df       	rcall	.-40     	; 0x54 <sendByte>
  7c:	92 9a       	sbi	0x12, 2	; 18
  7e:	cf 91       	pop	r28
  80:	08 95       	ret

00000082 <shutdownModeOff>:
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	f4 df       	rcall	.-24     	; 0x70 <sendPacket>
  88:	08 95       	ret

0000008a <decodeModeOn>:
  8a:	6f ef       	ldi	r22, 0xFF	; 255
  8c:	89 e0       	ldi	r24, 0x09	; 9
  8e:	f0 df       	rcall	.-32     	; 0x70 <sendPacket>
  90:	08 95       	ret

00000092 <setScanLimit>:
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	8b e0       	ldi	r24, 0x0B	; 11
  96:	ec df       	rcall	.-40     	; 0x70 <sendPacket>
  98:	08 95       	ret

0000009a <ledInit>:
  9a:	d4 df       	rcall	.-88     	; 0x44 <spiInit>
  9c:	f6 df       	rcall	.-20     	; 0x8a <decodeModeOn>
  9e:	f9 df       	rcall	.-14     	; 0x92 <setScanLimit>
  a0:	f0 df       	rcall	.-32     	; 0x82 <shutdownModeOff>
  a2:	08 95       	ret

000000a4 <showValue>:
 }

 void showValue(char value){
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	38 2f       	mov	r19, r24
	char hundreds = value/100;
  aa:	64 e6       	ldi	r22, 0x64	; 100
  ac:	74 d2       	rcall	.+1256   	; 0x596 <__udivmodqi4>
  ae:	28 2f       	mov	r18, r24
	char decs = (value - (hundreds*100))/10;
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	48 0f       	add	r20, r24
  be:	59 1f       	adc	r21, r25
  c0:	ca 01       	movw	r24, r20
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	48 0f       	add	r20, r24
  cc:	59 1f       	adc	r21, r25
  ce:	44 0f       	add	r20, r20
  d0:	55 1f       	adc	r21, r21
  d2:	44 0f       	add	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	83 2f       	mov	r24, r19
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	84 1b       	sub	r24, r20
  dc:	95 0b       	sbc	r25, r21
  de:	6a e0       	ldi	r22, 0x0A	; 10
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	65 d2       	rcall	.+1226   	; 0x5ae <__divmodhi4>
  e4:	d6 2f       	mov	r29, r22
	char units = (value - (hundreds*100) - decs*10);	
  e6:	82 2f       	mov	r24, r18
  e8:	88 0f       	add	r24, r24
  ea:	88 0f       	add	r24, r24
  ec:	82 0f       	add	r24, r18
  ee:	c8 2f       	mov	r28, r24
  f0:	c2 95       	swap	r28
  f2:	cc 0f       	add	r28, r28
  f4:	c0 7e       	andi	r28, 0xE0	; 224
  f6:	c8 1b       	sub	r28, r24
  f8:	c2 0f       	add	r28, r18
  fa:	c3 0f       	add	r28, r19
  fc:	96 2f       	mov	r25, r22
  fe:	92 95       	swap	r25
 100:	99 0f       	add	r25, r25
 102:	90 7e       	andi	r25, 0xE0	; 224
 104:	96 1b       	sub	r25, r22
 106:	99 0f       	add	r25, r25
 108:	99 0f       	add	r25, r25
 10a:	96 1b       	sub	r25, r22
 10c:	99 0f       	add	r25, r25
 10e:	c9 0f       	add	r28, r25
	setScanLimit();
	shutdownModeOff();
 }

 void showDigit(char digit, char pos){
	sendPacket(pos, digit);
 110:	62 2f       	mov	r22, r18
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	ad df       	rcall	.-166    	; 0x70 <sendPacket>
 116:	6d 2f       	mov	r22, r29
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	aa df       	rcall	.-172    	; 0x70 <sendPacket>
 11c:	6c 2f       	mov	r22, r28
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	a7 df       	rcall	.-178    	; 0x70 <sendPacket>
	char decs = (value - (hundreds*100))/10;
	char units = (value - (hundreds*100) - decs*10);	
	showDigit(hundreds,2);
	showDigit(decs,3);
	showDigit(units,4);
 }
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <dsInit>:
 void writecommand(uchar);
 uchar readtemp(void);
 uchar a, b, tt;

 void dsInit(char port, char ddr, char pin, char bit){
	_port = port;
 128:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <_port>
	_ddr = ddr;
 12c:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <_ddr>
	_pin = pin;
 130:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
	_bit = bit;
 134:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <_bit>
	isInit = 1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <isInit>
 13e:	08 95       	ret

00000140 <init_ds18b20>:
 

// Start transaction with 1-wire line.
void init_ds18b20(void)
{ 
	DQ_OUT;
 140:	b8 9a       	sbi	0x17, 0	; 23
	C_DQ ;
 142:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f ea       	ldi	r24, 0xAF	; 175
 146:	94 e0       	ldi	r25, 0x04	; 4
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <init_ds18b20+0x8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <init_ds18b20+0xe>
 14e:	00 00       	nop
	_delay_us(600);
	S_DQ;
 150:	c0 9a       	sbi	0x18, 0	; 24
 152:	95 e8       	ldi	r25, 0x85	; 133
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <init_ds18b20+0x14>
 158:	00 00       	nop
	_delay_us(50);
	DQ_IN;
 15a:	b8 98       	cbi	0x17, 0	; 23
	while(DQ);
 15c:	b0 99       	sbic	0x16, 0	; 22
 15e:	fe cf       	rjmp	.-4      	; 0x15c <init_ds18b20+0x1c>
 160:	8f ed       	ldi	r24, 0xDF	; 223
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <init_ds18b20+0x24>
 168:	00 c0       	rjmp	.+0      	; 0x16a <init_ds18b20+0x2a>
 16a:	00 00       	nop
	_delay_us(240);
	DQ_OUT;
 16c:	b8 9a       	sbi	0x17, 0	; 23
	S_DQ;
 16e:	c0 9a       	sbi	0x18, 0	; 24
 170:	87 e5       	ldi	r24, 0x57	; 87
 172:	92 e0       	ldi	r25, 0x02	; 2
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <init_ds18b20+0x34>
 178:	00 c0       	rjmp	.+0      	; 0x17a <init_ds18b20+0x3a>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <readbyte>:


// Read a byte from the sensor
uchar readbyte(void)
{ uchar i = 0,data = 0;
	DQ_OUT;
 17e:	b8 9a       	sbi	0x17, 0	; 23
 180:	98 e0       	ldi	r25, 0x08	; 8
}


// Read a byte from the sensor
uchar readbyte(void)
{ uchar i = 0,data = 0;
 182:	80 e0       	ldi	r24, 0x00	; 0
	DQ_OUT;
	for (i=0; i<8; i++)
	{ C_DQ ;
 184:	c0 98       	cbi	0x18, 0	; 24
		data >>= 1;
 186:	86 95       	lsr	r24
 188:	28 e0       	ldi	r18, 0x08	; 8
 18a:	2a 95       	dec	r18
 18c:	f1 f7       	brne	.-4      	; 0x18a <readbyte+0xc>
		_delay_us(3);
		S_DQ;
 18e:	c0 9a       	sbi	0x18, 0	; 24
		DQ_IN;
 190:	b8 98       	cbi	0x17, 0	; 23
 192:	20 e2       	ldi	r18, 0x20	; 32
 194:	2a 95       	dec	r18
 196:	f1 f7       	brne	.-4      	; 0x194 <readbyte+0x16>
		_delay_us(12);
		if(DQ)
 198:	b0 99       	sbic	0x16, 0	; 22
		data |= 0x80;
 19a:	80 68       	ori	r24, 0x80	; 128
		DQ_OUT;
 19c:	b8 9a       	sbi	0x17, 0	; 23
		S_DQ;
 19e:	c0 9a       	sbi	0x18, 0	; 24
 1a0:	28 e7       	ldi	r18, 0x78	; 120
 1a2:	2a 95       	dec	r18
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <readbyte+0x24>
 1a6:	2d e0       	ldi	r18, 0x0D	; 13
 1a8:	2a 95       	dec	r18
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <readbyte+0x2a>
 1ac:	00 00       	nop
 1ae:	91 50       	subi	r25, 0x01	; 1

// Read a byte from the sensor
uchar readbyte(void)
{ uchar i = 0,data = 0;
	DQ_OUT;
	for (i=0; i<8; i++)
 1b0:	49 f7       	brne	.-46     	; 0x184 <readbyte+0x6>
		S_DQ;
		_delay_us(45);
		_delay_us(5);
	}
	return(data);
}
 1b2:	08 95       	ret

000001b4 <writecommand>:

// Write a command to the sensor
void writecommand(uchar data)
{ uchar  i;
 1b4:	98 e0       	ldi	r25, 0x08	; 8
	for(i=0; i<8; i++)
	{ C_DQ;
 1b6:	c0 98       	cbi	0x18, 0	; 24
 1b8:	28 e2       	ldi	r18, 0x28	; 40
 1ba:	2a 95       	dec	r18
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <writecommand+0x6>
		_delay_us(15);
		if(data & 0x01)
 1be:	80 ff       	sbrs	r24, 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <writecommand+0x12>
		S_DQ;
 1c2:	c0 9a       	sbi	0x18, 0	; 24
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <writecommand+0x14>
		else
		C_DQ;
 1c6:	c0 98       	cbi	0x18, 0	; 24
 1c8:	28 e7       	ldi	r18, 0x78	; 120
 1ca:	2a 95       	dec	r18
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <writecommand+0x16>
		_delay_us(45);
		data >>= 1;
 1ce:	86 95       	lsr	r24
		S_DQ;
 1d0:	c0 9a       	sbi	0x18, 0	; 24
 1d2:	25 e0       	ldi	r18, 0x05	; 5
 1d4:	2a 95       	dec	r18
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <writecommand+0x20>
 1d8:	00 00       	nop
 1da:	91 50       	subi	r25, 0x01	; 1
}

// Write a command to the sensor
void writecommand(uchar data)
{ uchar  i;
	for(i=0; i<8; i++)
 1dc:	61 f7       	brne	.-40     	; 0x1b6 <writecommand+0x2>
		_delay_us(45);
		data >>= 1;
		S_DQ;
		_delay_us(2);
	}
}
 1de:	08 95       	ret

000001e0 <readtemp>:

// Read value from the sensor
uchar readtemp(void)
{ uint t;
	init_ds18b20();
 1e0:	af df       	rcall	.-162    	; 0x140 <init_ds18b20>
	// Convert
	writecommand(0xCC);
 1e2:	8c ec       	ldi	r24, 0xCC	; 204
 1e4:	e7 df       	rcall	.-50     	; 0x1b4 <writecommand>
	writecommand(0x44);
 1e6:	84 e4       	ldi	r24, 0x44	; 68
 1e8:	e5 df       	rcall	.-54     	; 0x1b4 <writecommand>
	init_ds18b20();
 1ea:	aa df       	rcall	.-172    	; 0x140 <init_ds18b20>
	// Read Scratch memory area
	writecommand(0xCC);
 1ec:	8c ec       	ldi	r24, 0xCC	; 204
 1ee:	e2 df       	rcall	.-60     	; 0x1b4 <writecommand>
	writecommand(0xBE);
 1f0:	8e eb       	ldi	r24, 0xBE	; 190
 1f2:	e0 df       	rcall	.-64     	; 0x1b4 <writecommand>
	a = readbyte();
 1f4:	c4 df       	rcall	.-120    	; 0x17e <readbyte>
 1f6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <a>
	b = readbyte();
 1fa:	c1 df       	rcall	.-126    	; 0x17e <readbyte>
 1fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <b>
	t = b;
 200:	68 2f       	mov	r22, r24
 202:	70 e0       	ldi	r23, 0x00	; 0
	t <<= 8;
 204:	76 2f       	mov	r23, r22
 206:	66 27       	eor	r22, r22
	t = t|a;
	tt = t*0.0625;
 208:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <a>
 20c:	68 2b       	or	r22, r24
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	c8 d0       	rcall	.+400    	; 0x3a4 <__floatunsisf>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e8       	ldi	r20, 0x80	; 128
 21a:	5d e3       	ldi	r21, 0x3D	; 61
 21c:	29 d1       	rcall	.+594    	; 0x470 <__mulsf3>
 21e:	96 d0       	rcall	.+300    	; 0x34c <__fixunssfsi>
 220:	86 2f       	mov	r24, r22
 222:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <tt>
	return(tt);
}
 226:	08 95       	ret

00000228 <initPinChangeInterrupts>:
	dsInit(PD0,DDD0, PINB0,0);
}


void initPinChangeInterrupts(){
	GIMSK |= 1<<PCIE0; 
 228:	8b b7       	in	r24, 0x3b	; 59
 22a:	80 62       	ori	r24, 0x20	; 32
 22c:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 1<<PCINT1|1<<PCINT2|1<<PCINT3|1<<PCINT4;
 22e:	80 b5       	in	r24, 0x20	; 32
 230:	8e 61       	ori	r24, 0x1E	; 30
 232:	80 bd       	out	0x20, r24	; 32
	sei();
 234:	78 94       	sei
 236:	08 95       	ret

00000238 <init>:
		
	}
}

void init(){
	DDRB = 0x1E;
 238:	8e e1       	ldi	r24, 0x1E	; 30
 23a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
 23c:	18 ba       	out	0x18, r1	; 24

	DDRD |= 1<<CS;
 23e:	8a 9a       	sbi	0x11, 2	; 17
	PORTD |= 1<<CS;
 240:	92 9a       	sbi	0x12, 2	; 18
	initPinChangeInterrupts();
 242:	f2 df       	rcall	.-28     	; 0x228 <initPinChangeInterrupts>
	ledInit();
 244:	2a df       	rcall	.-428    	; 0x9a <ledInit>
	//dsInit(PORTB,DDRB, PINB,0);
	dsInit(PD0,DDD0, PINB0,0);
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	68 df       	rcall	.-304    	; 0x128 <dsInit>
 258:	08 95       	ret

0000025a <main>:
volatile char s;

int main(void)
{
	char val;
	state = waiting;
 25a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <state>
	temperature = 0;
 25e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temperature+0x1>
 262:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temperature>
	temp = 0;
 266:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp+0x1>
 26a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <temp>
	init();
 26e:	e4 df       	rcall	.-56     	; 0x238 <init>
	showValue(val);
		switch(state){
			case waiting:
				if(tasks.set){
					temp = temperature;
					state = setting;
 270:	c1 e0       	ldi	r28, 0x01	; 1
	temperature = 0;
	temp = 0;
	init();
	while (1)
	{
	val = readtemp();
 272:	b6 df       	rcall	.-148    	; 0x1e0 <readtemp>
	//_delay_ms(100);
	showValue(val);
 274:	17 df       	rcall	.-466    	; 0xa4 <showValue>
		switch(state){
 276:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <state>
 27a:	88 23       	and	r24, r24
 27c:	19 f0       	breq	.+6      	; 0x284 <main+0x2a>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	81 f0       	breq	.+32     	; 0x2a2 <main+0x48>
 282:	f7 cf       	rjmp	.-18     	; 0x272 <main+0x18>
			case waiting:
				if(tasks.set){
 284:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tasks>
 288:	82 ff       	sbrs	r24, 2
 28a:	f3 cf       	rjmp	.-26     	; 0x272 <main+0x18>
					temp = temperature;
 28c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <temperature>
 290:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <temperature+0x1>
 294:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <temp+0x1>
 298:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <temp>
					state = setting;
 29c:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <state>
 2a0:	e8 cf       	rjmp	.-48     	; 0x272 <main+0x18>
				}
				break;
			case setting:
				if(tasks.up)
 2a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tasks>
 2a6:	80 ff       	sbrs	r24, 0
 2a8:	0a c0       	rjmp	.+20     	; 0x2be <main+0x64>
					temp++;
 2aa:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <temp>
 2ae:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <temp+0x1>
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <temp+0x1>
 2ba:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <temp>
				if(tasks.down)
 2be:	81 ff       	sbrs	r24, 1
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <main+0x7c>
					temp--;
 2c2:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <temp>
 2c6:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <temp+0x1>
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	31 09       	sbc	r19, r1
 2ce:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <temp+0x1>
 2d2:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <temp>
				if(tasks.reset)
 2d6:	83 ff       	sbrs	r24, 3
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <main+0x88>
					temp = 0;
 2da:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp+0x1>
 2de:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <temp>
				if(tasks.set){
 2e2:	82 ff       	sbrs	r24, 2
 2e4:	c6 cf       	rjmp	.-116    	; 0x272 <main+0x18>
					temperature = temp;
 2e6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <temp>
 2ea:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <temp+0x1>
 2ee:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <temperature+0x1>
 2f2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <temperature>
					state = waiting;
 2f6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <state>
 2fa:	bb cf       	rjmp	.-138    	; 0x272 <main+0x18>

000002fc <__vector_11>:





ISR(PCINT_vect){
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	11 24       	eor	r1, r1
 306:	8f 93       	push	r24
	if(PINB & UP){
 308:	b1 9b       	sbis	0x16, 1	; 22
 30a:	05 c0       	rjmp	.+10     	; 0x316 <__vector_11+0x1a>
		tasks.up = true;
 30c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tasks>
 310:	81 60       	ori	r24, 0x01	; 1
 312:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tasks>
		//spiSend(0xff);
		//PORTD = 0x4; 
	}
	if(PINB & DOWN){
 316:	b2 9b       	sbis	0x16, 2	; 22
 318:	05 c0       	rjmp	.+10     	; 0x324 <__vector_11+0x28>
		tasks.down = true;
 31a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tasks>
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tasks>
		//PORTD = 0x8; 
	}
	if(PINB & SET){
 324:	b3 9b       	sbis	0x16, 3	; 22
 326:	05 c0       	rjmp	.+10     	; 0x332 <__vector_11+0x36>
		tasks.set = true;
 328:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tasks>
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tasks>
		//PORTD = 0x10; 
	}
	if(PINB & RESET){
 332:	b4 9b       	sbis	0x16, 4	; 22
 334:	05 c0       	rjmp	.+10     	; 0x340 <__vector_11+0x44>
		tasks.reset = true;
 336:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <tasks>
 33a:	88 60       	ori	r24, 0x08	; 8
 33c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <tasks>
		//PORTD = 0x20; 
	}
}
 340:	8f 91       	pop	r24
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <__fixunssfsi>:
 34c:	70 d0       	rcall	.+224    	; 0x42e <__fp_splitA>
 34e:	88 f0       	brcs	.+34     	; 0x372 <__fixunssfsi+0x26>
 350:	9f 57       	subi	r25, 0x7F	; 127
 352:	90 f0       	brcs	.+36     	; 0x378 <__fixunssfsi+0x2c>
 354:	b9 2f       	mov	r27, r25
 356:	99 27       	eor	r25, r25
 358:	b7 51       	subi	r27, 0x17	; 23
 35a:	a0 f0       	brcs	.+40     	; 0x384 <__fixunssfsi+0x38>
 35c:	d1 f0       	breq	.+52     	; 0x392 <__fixunssfsi+0x46>
 35e:	66 0f       	add	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	88 1f       	adc	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	1a f0       	brmi	.+6      	; 0x36e <__fixunssfsi+0x22>
 368:	ba 95       	dec	r27
 36a:	c9 f7       	brne	.-14     	; 0x35e <__fixunssfsi+0x12>
 36c:	12 c0       	rjmp	.+36     	; 0x392 <__fixunssfsi+0x46>
 36e:	b1 30       	cpi	r27, 0x01	; 1
 370:	81 f0       	breq	.+32     	; 0x392 <__fixunssfsi+0x46>
 372:	77 d0       	rcall	.+238    	; 0x462 <__fp_zero>
 374:	b1 e0       	ldi	r27, 0x01	; 1
 376:	08 95       	ret
 378:	74 c0       	rjmp	.+232    	; 0x462 <__fp_zero>
 37a:	67 2f       	mov	r22, r23
 37c:	78 2f       	mov	r23, r24
 37e:	88 27       	eor	r24, r24
 380:	b8 5f       	subi	r27, 0xF8	; 248
 382:	39 f0       	breq	.+14     	; 0x392 <__fixunssfsi+0x46>
 384:	b9 3f       	cpi	r27, 0xF9	; 249
 386:	cc f3       	brlt	.-14     	; 0x37a <__fixunssfsi+0x2e>
 388:	86 95       	lsr	r24
 38a:	77 95       	ror	r23
 38c:	67 95       	ror	r22
 38e:	b3 95       	inc	r27
 390:	d9 f7       	brne	.-10     	; 0x388 <__fixunssfsi+0x3c>
 392:	3e f4       	brtc	.+14     	; 0x3a2 <__fixunssfsi+0x56>
 394:	90 95       	com	r25
 396:	80 95       	com	r24
 398:	70 95       	com	r23
 39a:	61 95       	neg	r22
 39c:	7f 4f       	sbci	r23, 0xFF	; 255
 39e:	8f 4f       	sbci	r24, 0xFF	; 255
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	08 95       	ret

000003a4 <__floatunsisf>:
 3a4:	e8 94       	clt
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <__floatsisf+0x12>

000003a8 <__floatsisf>:
 3a8:	97 fb       	bst	r25, 7
 3aa:	3e f4       	brtc	.+14     	; 0x3ba <__floatsisf+0x12>
 3ac:	90 95       	com	r25
 3ae:	80 95       	com	r24
 3b0:	70 95       	com	r23
 3b2:	61 95       	neg	r22
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	99 23       	and	r25, r25
 3bc:	a9 f0       	breq	.+42     	; 0x3e8 <__floatsisf+0x40>
 3be:	f9 2f       	mov	r31, r25
 3c0:	96 e9       	ldi	r25, 0x96	; 150
 3c2:	bb 27       	eor	r27, r27
 3c4:	93 95       	inc	r25
 3c6:	f6 95       	lsr	r31
 3c8:	87 95       	ror	r24
 3ca:	77 95       	ror	r23
 3cc:	67 95       	ror	r22
 3ce:	b7 95       	ror	r27
 3d0:	f1 11       	cpse	r31, r1
 3d2:	f8 cf       	rjmp	.-16     	; 0x3c4 <__floatsisf+0x1c>
 3d4:	fa f4       	brpl	.+62     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3d6:	bb 0f       	add	r27, r27
 3d8:	11 f4       	brne	.+4      	; 0x3de <__floatsisf+0x36>
 3da:	60 ff       	sbrs	r22, 0
 3dc:	1b c0       	rjmp	.+54     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3de:	6f 5f       	subi	r22, 0xFF	; 255
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	16 c0       	rjmp	.+44     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3e8:	88 23       	and	r24, r24
 3ea:	11 f0       	breq	.+4      	; 0x3f0 <__floatsisf+0x48>
 3ec:	96 e9       	ldi	r25, 0x96	; 150
 3ee:	11 c0       	rjmp	.+34     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f0:	77 23       	and	r23, r23
 3f2:	21 f0       	breq	.+8      	; 0x3fc <__floatsisf+0x54>
 3f4:	9e e8       	ldi	r25, 0x8E	; 142
 3f6:	87 2f       	mov	r24, r23
 3f8:	76 2f       	mov	r23, r22
 3fa:	05 c0       	rjmp	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	66 23       	and	r22, r22
 3fe:	71 f0       	breq	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 400:	96 e8       	ldi	r25, 0x86	; 134
 402:	86 2f       	mov	r24, r22
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	2a f0       	brmi	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40a:	9a 95       	dec	r25
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	88 1f       	adc	r24, r24
 412:	da f7       	brpl	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 414:	88 0f       	add	r24, r24
 416:	96 95       	lsr	r25
 418:	87 95       	ror	r24
 41a:	97 f9       	bld	r25, 7
 41c:	08 95       	ret

0000041e <__fp_split3>:
 41e:	57 fd       	sbrc	r21, 7
 420:	90 58       	subi	r25, 0x80	; 128
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	59 f0       	breq	.+22     	; 0x43e <__fp_splitA+0x10>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	71 f0       	breq	.+28     	; 0x448 <__fp_splitA+0x1a>
 42c:	47 95       	ror	r20

0000042e <__fp_splitA>:
 42e:	88 0f       	add	r24, r24
 430:	97 fb       	bst	r25, 7
 432:	99 1f       	adc	r25, r25
 434:	61 f0       	breq	.+24     	; 0x44e <__fp_splitA+0x20>
 436:	9f 3f       	cpi	r25, 0xFF	; 255
 438:	79 f0       	breq	.+30     	; 0x458 <__fp_splitA+0x2a>
 43a:	87 95       	ror	r24
 43c:	08 95       	ret
 43e:	12 16       	cp	r1, r18
 440:	13 06       	cpc	r1, r19
 442:	14 06       	cpc	r1, r20
 444:	55 1f       	adc	r21, r21
 446:	f2 cf       	rjmp	.-28     	; 0x42c <__fp_split3+0xe>
 448:	46 95       	lsr	r20
 44a:	f1 df       	rcall	.-30     	; 0x42e <__fp_splitA>
 44c:	08 c0       	rjmp	.+16     	; 0x45e <__fp_splitA+0x30>
 44e:	16 16       	cp	r1, r22
 450:	17 06       	cpc	r1, r23
 452:	18 06       	cpc	r1, r24
 454:	99 1f       	adc	r25, r25
 456:	f1 cf       	rjmp	.-30     	; 0x43a <__fp_splitA+0xc>
 458:	86 95       	lsr	r24
 45a:	71 05       	cpc	r23, r1
 45c:	61 05       	cpc	r22, r1
 45e:	08 94       	sec
 460:	08 95       	ret

00000462 <__fp_zero>:
 462:	e8 94       	clt

00000464 <__fp_szero>:
 464:	bb 27       	eor	r27, r27
 466:	66 27       	eor	r22, r22
 468:	77 27       	eor	r23, r23
 46a:	cb 01       	movw	r24, r22
 46c:	97 f9       	bld	r25, 7
 46e:	08 95       	ret

00000470 <__mulsf3>:
 470:	0a d0       	rcall	.+20     	; 0x486 <__mulsf3x>
 472:	80 c0       	rjmp	.+256    	; 0x574 <__fp_round>
 474:	71 d0       	rcall	.+226    	; 0x558 <__fp_pscA>
 476:	28 f0       	brcs	.+10     	; 0x482 <__mulsf3+0x12>
 478:	76 d0       	rcall	.+236    	; 0x566 <__fp_pscB>
 47a:	18 f0       	brcs	.+6      	; 0x482 <__mulsf3+0x12>
 47c:	95 23       	and	r25, r21
 47e:	09 f0       	breq	.+2      	; 0x482 <__mulsf3+0x12>
 480:	62 c0       	rjmp	.+196    	; 0x546 <__fp_inf>
 482:	67 c0       	rjmp	.+206    	; 0x552 <__fp_nan>
 484:	ef cf       	rjmp	.-34     	; 0x464 <__fp_szero>

00000486 <__mulsf3x>:
 486:	cb df       	rcall	.-106    	; 0x41e <__fp_split3>
 488:	a8 f3       	brcs	.-22     	; 0x474 <__mulsf3+0x4>

0000048a <__mulsf3_pse>:
 48a:	99 23       	and	r25, r25
 48c:	d9 f3       	breq	.-10     	; 0x484 <__mulsf3+0x14>
 48e:	55 23       	and	r21, r21
 490:	c9 f3       	breq	.-14     	; 0x484 <__mulsf3+0x14>
 492:	95 0f       	add	r25, r21
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	55 1f       	adc	r21, r21
 498:	aa 27       	eor	r26, r26
 49a:	ee 27       	eor	r30, r30
 49c:	ff 27       	eor	r31, r31
 49e:	bb 27       	eor	r27, r27
 4a0:	00 24       	eor	r0, r0
 4a2:	08 94       	sec
 4a4:	67 95       	ror	r22
 4a6:	20 f4       	brcc	.+8      	; 0x4b0 <__mulsf3_pse+0x26>
 4a8:	e2 0f       	add	r30, r18
 4aa:	f3 1f       	adc	r31, r19
 4ac:	b4 1f       	adc	r27, r20
 4ae:	0a 1e       	adc	r0, r26
 4b0:	22 0f       	add	r18, r18
 4b2:	33 1f       	adc	r19, r19
 4b4:	44 1f       	adc	r20, r20
 4b6:	aa 1f       	adc	r26, r26
 4b8:	66 95       	lsr	r22
 4ba:	a9 f7       	brne	.-22     	; 0x4a6 <__mulsf3_pse+0x1c>
 4bc:	77 95       	ror	r23
 4be:	30 f4       	brcc	.+12     	; 0x4cc <__mulsf3_pse+0x42>
 4c0:	f3 0f       	add	r31, r19
 4c2:	b4 1f       	adc	r27, r20
 4c4:	0a 1e       	adc	r0, r26
 4c6:	12 1e       	adc	r1, r18
 4c8:	08 f4       	brcc	.+2      	; 0x4cc <__mulsf3_pse+0x42>
 4ca:	63 95       	inc	r22
 4cc:	33 0f       	add	r19, r19
 4ce:	44 1f       	adc	r20, r20
 4d0:	aa 1f       	adc	r26, r26
 4d2:	22 1f       	adc	r18, r18
 4d4:	76 95       	lsr	r23
 4d6:	99 f7       	brne	.-26     	; 0x4be <__mulsf3_pse+0x34>
 4d8:	87 95       	ror	r24
 4da:	20 f4       	brcc	.+8      	; 0x4e4 <__mulsf3_pse+0x5a>
 4dc:	b4 0f       	add	r27, r20
 4de:	0a 1e       	adc	r0, r26
 4e0:	12 1e       	adc	r1, r18
 4e2:	63 1f       	adc	r22, r19
 4e4:	44 0f       	add	r20, r20
 4e6:	aa 1f       	adc	r26, r26
 4e8:	22 1f       	adc	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	86 95       	lsr	r24
 4ee:	a9 f7       	brne	.-22     	; 0x4da <__mulsf3_pse+0x50>
 4f0:	86 2f       	mov	r24, r22
 4f2:	71 2d       	mov	r23, r1
 4f4:	60 2d       	mov	r22, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	9f 57       	subi	r25, 0x7F	; 127
 4fa:	50 40       	sbci	r21, 0x00	; 0
 4fc:	8a f0       	brmi	.+34     	; 0x520 <__mulsf3_pse+0x96>
 4fe:	e1 f0       	breq	.+56     	; 0x538 <__mulsf3_pse+0xae>
 500:	88 23       	and	r24, r24
 502:	4a f0       	brmi	.+18     	; 0x516 <__mulsf3_pse+0x8c>
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	bb 1f       	adc	r27, r27
 50a:	66 1f       	adc	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	91 50       	subi	r25, 0x01	; 1
 512:	50 40       	sbci	r21, 0x00	; 0
 514:	a9 f7       	brne	.-22     	; 0x500 <__mulsf3_pse+0x76>
 516:	9e 3f       	cpi	r25, 0xFE	; 254
 518:	51 05       	cpc	r21, r1
 51a:	70 f0       	brcs	.+28     	; 0x538 <__mulsf3_pse+0xae>
 51c:	14 c0       	rjmp	.+40     	; 0x546 <__fp_inf>
 51e:	a2 cf       	rjmp	.-188    	; 0x464 <__fp_szero>
 520:	5f 3f       	cpi	r21, 0xFF	; 255
 522:	ec f3       	brlt	.-6      	; 0x51e <__mulsf3_pse+0x94>
 524:	98 3e       	cpi	r25, 0xE8	; 232
 526:	dc f3       	brlt	.-10     	; 0x51e <__mulsf3_pse+0x94>
 528:	86 95       	lsr	r24
 52a:	77 95       	ror	r23
 52c:	67 95       	ror	r22
 52e:	b7 95       	ror	r27
 530:	f7 95       	ror	r31
 532:	e7 95       	ror	r30
 534:	9f 5f       	subi	r25, 0xFF	; 255
 536:	c1 f7       	brne	.-16     	; 0x528 <__mulsf3_pse+0x9e>
 538:	fe 2b       	or	r31, r30
 53a:	88 0f       	add	r24, r24
 53c:	91 1d       	adc	r25, r1
 53e:	96 95       	lsr	r25
 540:	87 95       	ror	r24
 542:	97 f9       	bld	r25, 7
 544:	08 95       	ret

00000546 <__fp_inf>:
 546:	97 f9       	bld	r25, 7
 548:	9f 67       	ori	r25, 0x7F	; 127
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	08 95       	ret

00000552 <__fp_nan>:
 552:	9f ef       	ldi	r25, 0xFF	; 255
 554:	80 ec       	ldi	r24, 0xC0	; 192
 556:	08 95       	ret

00000558 <__fp_pscA>:
 558:	00 24       	eor	r0, r0
 55a:	0a 94       	dec	r0
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	09 06       	cpc	r0, r25
 564:	08 95       	ret

00000566 <__fp_pscB>:
 566:	00 24       	eor	r0, r0
 568:	0a 94       	dec	r0
 56a:	12 16       	cp	r1, r18
 56c:	13 06       	cpc	r1, r19
 56e:	14 06       	cpc	r1, r20
 570:	05 06       	cpc	r0, r21
 572:	08 95       	ret

00000574 <__fp_round>:
 574:	09 2e       	mov	r0, r25
 576:	03 94       	inc	r0
 578:	00 0c       	add	r0, r0
 57a:	11 f4       	brne	.+4      	; 0x580 <__fp_round+0xc>
 57c:	88 23       	and	r24, r24
 57e:	52 f0       	brmi	.+20     	; 0x594 <__fp_round+0x20>
 580:	bb 0f       	add	r27, r27
 582:	40 f4       	brcc	.+16     	; 0x594 <__fp_round+0x20>
 584:	bf 2b       	or	r27, r31
 586:	11 f4       	brne	.+4      	; 0x58c <__fp_round+0x18>
 588:	60 ff       	sbrs	r22, 0
 58a:	04 c0       	rjmp	.+8      	; 0x594 <__fp_round+0x20>
 58c:	6f 5f       	subi	r22, 0xFF	; 255
 58e:	7f 4f       	sbci	r23, 0xFF	; 255
 590:	8f 4f       	sbci	r24, 0xFF	; 255
 592:	9f 4f       	sbci	r25, 0xFF	; 255
 594:	08 95       	ret

00000596 <__udivmodqi4>:
 596:	99 1b       	sub	r25, r25
 598:	79 e0       	ldi	r23, 0x09	; 9
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <__udivmodqi4_ep>

0000059c <__udivmodqi4_loop>:
 59c:	99 1f       	adc	r25, r25
 59e:	96 17       	cp	r25, r22
 5a0:	08 f0       	brcs	.+2      	; 0x5a4 <__udivmodqi4_ep>
 5a2:	96 1b       	sub	r25, r22

000005a4 <__udivmodqi4_ep>:
 5a4:	88 1f       	adc	r24, r24
 5a6:	7a 95       	dec	r23
 5a8:	c9 f7       	brne	.-14     	; 0x59c <__udivmodqi4_loop>
 5aa:	80 95       	com	r24
 5ac:	08 95       	ret

000005ae <__divmodhi4>:
 5ae:	97 fb       	bst	r25, 7
 5b0:	07 2e       	mov	r0, r23
 5b2:	16 f4       	brtc	.+4      	; 0x5b8 <__divmodhi4+0xa>
 5b4:	00 94       	com	r0
 5b6:	06 d0       	rcall	.+12     	; 0x5c4 <__divmodhi4_neg1>
 5b8:	77 fd       	sbrc	r23, 7
 5ba:	08 d0       	rcall	.+16     	; 0x5cc <__divmodhi4_neg2>
 5bc:	0b d0       	rcall	.+22     	; 0x5d4 <__udivmodhi4>
 5be:	07 fc       	sbrc	r0, 7
 5c0:	05 d0       	rcall	.+10     	; 0x5cc <__divmodhi4_neg2>
 5c2:	3e f4       	brtc	.+14     	; 0x5d2 <__divmodhi4_exit>

000005c4 <__divmodhi4_neg1>:
 5c4:	90 95       	com	r25
 5c6:	81 95       	neg	r24
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__divmodhi4_neg2>:
 5cc:	70 95       	com	r23
 5ce:	61 95       	neg	r22
 5d0:	7f 4f       	sbci	r23, 0xFF	; 255

000005d2 <__divmodhi4_exit>:
 5d2:	08 95       	ret

000005d4 <__udivmodhi4>:
 5d4:	aa 1b       	sub	r26, r26
 5d6:	bb 1b       	sub	r27, r27
 5d8:	51 e1       	ldi	r21, 0x11	; 17
 5da:	07 c0       	rjmp	.+14     	; 0x5ea <__udivmodhi4_ep>

000005dc <__udivmodhi4_loop>:
 5dc:	aa 1f       	adc	r26, r26
 5de:	bb 1f       	adc	r27, r27
 5e0:	a6 17       	cp	r26, r22
 5e2:	b7 07       	cpc	r27, r23
 5e4:	10 f0       	brcs	.+4      	; 0x5ea <__udivmodhi4_ep>
 5e6:	a6 1b       	sub	r26, r22
 5e8:	b7 0b       	sbc	r27, r23

000005ea <__udivmodhi4_ep>:
 5ea:	88 1f       	adc	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	5a 95       	dec	r21
 5f0:	a9 f7       	brne	.-22     	; 0x5dc <__udivmodhi4_loop>
 5f2:	80 95       	com	r24
 5f4:	90 95       	com	r25
 5f6:	bc 01       	movw	r22, r24
 5f8:	cd 01       	movw	r24, r26
 5fa:	08 95       	ret

000005fc <_exit>:
 5fc:	f8 94       	cli

000005fe <__stop_program>:
 5fe:	ff cf       	rjmp	.-2      	; 0x5fe <__stop_program>
