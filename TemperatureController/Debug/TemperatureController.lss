
TemperatureController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000070e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000070e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a6  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099a  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  00002e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000777  00000000  00000000  00003349  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	bf c1       	rjmp	.+894    	; 0x396 <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a0 37       	cpi	r26, 0x70	; 112
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	2d d1       	rcall	.+602    	; 0x29a <main>
  40:	2a c3       	rjmp	.+1620   	; 0x696 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <spiInit>:
	shutdownModeOff();
	showSymbol(CELCIUS);
 }

 void showDigit(char digit, char pos){
	sendPacket(pos, digit);
  44:	87 b3       	in	r24, 0x17	; 23
  46:	80 6d       	ori	r24, 0xD0	; 208
  48:	87 bb       	out	0x17, r24	; 23
  4a:	bd 98       	cbi	0x17, 5	; 23
  4c:	88 b3       	in	r24, 0x18	; 24
  4e:	8f 72       	andi	r24, 0x2F	; 47
  50:	88 bb       	out	0x18, r24	; 24
  52:	08 95       	ret

00000054 <sendByte>:
  54:	8f b9       	out	0x0f, r24	; 15
  56:	76 9a       	sbi	0x0e, 6	; 14
  58:	76 99       	sbic	0x0e, 6	; 14
  5a:	09 c0       	rjmp	.+18     	; 0x6e <sendByte+0x1a>
  5c:	8d b1       	in	r24, 0x0d	; 13
  5e:	8b 61       	ori	r24, 0x1B	; 27
  60:	8d b9       	out	0x0d, r24	; 13
  62:	8d e0       	ldi	r24, 0x0D	; 13
  64:	8a 95       	dec	r24
  66:	f1 f7       	brne	.-4      	; 0x64 <sendByte+0x10>
  68:	00 00       	nop
  6a:	76 9b       	sbis	0x0e, 6	; 14
  6c:	f7 cf       	rjmp	.-18     	; 0x5c <sendByte+0x8>
  6e:	08 95       	ret

00000070 <sendPacket>:
  70:	cf 93       	push	r28
  72:	c6 2f       	mov	r28, r22
  74:	92 98       	cbi	0x12, 2	; 18
  76:	ee df       	rcall	.-36     	; 0x54 <sendByte>
  78:	8c 2f       	mov	r24, r28
  7a:	ec df       	rcall	.-40     	; 0x54 <sendByte>
  7c:	92 9a       	sbi	0x12, 2	; 18
  7e:	cf 91       	pop	r28
  80:	08 95       	ret

00000082 <shutdownModeOff>:
  82:	61 e0       	ldi	r22, 0x01	; 1
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	f4 df       	rcall	.-24     	; 0x70 <sendPacket>
  88:	08 95       	ret

0000008a <decodeModeOn>:
  8a:	67 e0       	ldi	r22, 0x07	; 7
  8c:	89 e0       	ldi	r24, 0x09	; 9
  8e:	f0 df       	rcall	.-32     	; 0x70 <sendPacket>
  90:	08 95       	ret

00000092 <setScanLimit>:
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	8b e0       	ldi	r24, 0x0B	; 11
  96:	ec df       	rcall	.-40     	; 0x70 <sendPacket>
  98:	08 95       	ret

0000009a <showSymbol>:
  9a:	68 2f       	mov	r22, r24
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	e8 df       	rcall	.-48     	; 0x70 <sendPacket>
  a0:	08 95       	ret

000000a2 <ledInit>:
  a2:	d0 df       	rcall	.-96     	; 0x44 <spiInit>
  a4:	f2 df       	rcall	.-28     	; 0x8a <decodeModeOn>
  a6:	f5 df       	rcall	.-22     	; 0x92 <setScanLimit>
  a8:	ec df       	rcall	.-40     	; 0x82 <shutdownModeOff>
  aa:	83 e6       	ldi	r24, 0x63	; 99
  ac:	f6 df       	rcall	.-20     	; 0x9a <showSymbol>
  ae:	08 95       	ret

000000b0 <setMode>:
 }

 void setMode(char mode){
	_mode = mode;
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  b4:	08 95       	ret

000000b6 <showValue>:
 }

 void showValue(char value){
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	38 2f       	mov	r19, r24
	char hundreds = value/100;
  bc:	64 e6       	ldi	r22, 0x64	; 100
  be:	b8 d2       	rcall	.+1392   	; 0x630 <__udivmodqi4>
  c0:	28 2f       	mov	r18, r24
	char decs = (value - (hundreds*100))/10;
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	ac 01       	movw	r20, r24
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	48 0f       	add	r20, r24
  d0:	59 1f       	adc	r21, r25
  d2:	ca 01       	movw	r24, r20
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	48 0f       	add	r20, r24
  de:	59 1f       	adc	r21, r25
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	83 2f       	mov	r24, r19
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	84 1b       	sub	r24, r20
  ee:	95 0b       	sbc	r25, r21
  f0:	6a e0       	ldi	r22, 0x0A	; 10
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	a9 d2       	rcall	.+1362   	; 0x648 <__divmodhi4>
  f6:	d6 2f       	mov	r29, r22
	char units = (value - (hundreds*100) - decs*10);	
  f8:	82 2f       	mov	r24, r18
  fa:	88 0f       	add	r24, r24
  fc:	88 0f       	add	r24, r24
  fe:	82 0f       	add	r24, r18
 100:	c8 2f       	mov	r28, r24
 102:	c2 95       	swap	r28
 104:	cc 0f       	add	r28, r28
 106:	c0 7e       	andi	r28, 0xE0	; 224
 108:	c8 1b       	sub	r28, r24
 10a:	c2 0f       	add	r28, r18
 10c:	c3 0f       	add	r28, r19
 10e:	96 2f       	mov	r25, r22
 110:	92 95       	swap	r25
 112:	99 0f       	add	r25, r25
 114:	90 7e       	andi	r25, 0xE0	; 224
 116:	96 1b       	sub	r25, r22
 118:	99 0f       	add	r25, r25
 11a:	99 0f       	add	r25, r25
 11c:	96 1b       	sub	r25, r22
 11e:	99 0f       	add	r25, r25
 120:	c9 0f       	add	r28, r25
	shutdownModeOff();
	showSymbol(CELCIUS);
 }

 void showDigit(char digit, char pos){
	sendPacket(pos, digit);
 122:	62 2f       	mov	r22, r18
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	a4 df       	rcall	.-184    	; 0x70 <sendPacket>
 128:	6d 2f       	mov	r22, r29
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	a1 df       	rcall	.-190    	; 0x70 <sendPacket>
 12e:	6c 2f       	mov	r22, r28
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	9e df       	rcall	.-196    	; 0x70 <sendPacket>
	char decs = (value - (hundreds*100))/10;
	char units = (value - (hundreds*100) - decs*10);	
	showDigit(hundreds,1);
	showDigit(decs,2);
	showDigit(units,3);
	if(_mode == 0)
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 138:	81 11       	cpse	r24, r1
 13a:	03 c0       	rjmp	.+6      	; 0x142 <__stack+0x63>
		showSymbol(CELCIUS);
 13c:	83 e6       	ldi	r24, 0x63	; 99
 13e:	ad df       	rcall	.-166    	; 0x9a <showSymbol>
 140:	02 c0       	rjmp	.+4      	; 0x146 <__stack+0x67>
	else
		showSymbol(SETTING);
 142:	8d e1       	ldi	r24, 0x1D	; 29
 144:	aa df       	rcall	.-172    	; 0x9a <showSymbol>
 }
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <dsInit>:
 void writecommand(uchar);
 uchar readtemp(void);
 uchar a, b, tt;

 void dsInit(char port, char ddr, char pin, char bit){
	_port = port;
 14c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_port>
	_ddr = ddr;
 150:	60 93 67 00 	sts	0x0067, r22	; 0x800067 <_ddr>
	_pin = pin;
 154:	40 93 61 00 	sts	0x0061, r20	; 0x800061 <_pin>
	_bit = bit;
 158:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <_bit>
	isInit = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <isInit>
 162:	08 95       	ret

00000164 <init_ds18b20>:
 

// Start transaction with 1-wire line.
void init_ds18b20(void)
{ 
	DQ_OUT;
 164:	b8 9a       	sbi	0x17, 0	; 23
	C_DQ ;
 166:	c0 98       	cbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	8f ea       	ldi	r24, 0xAF	; 175
 16a:	94 e0       	ldi	r25, 0x04	; 4
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <init_ds18b20+0x8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <init_ds18b20+0xe>
 172:	00 00       	nop
	_delay_us(600);
	S_DQ;
 174:	c0 9a       	sbi	0x18, 0	; 24
 176:	95 e8       	ldi	r25, 0x85	; 133
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <init_ds18b20+0x14>
 17c:	00 00       	nop
	_delay_us(50);
	DQ_IN;
 17e:	b8 98       	cbi	0x17, 0	; 23
	while(DQ);
 180:	b0 99       	sbic	0x16, 0	; 22
 182:	fe cf       	rjmp	.-4      	; 0x180 <init_ds18b20+0x1c>
 184:	8f ed       	ldi	r24, 0xDF	; 223
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <init_ds18b20+0x24>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <init_ds18b20+0x2a>
 18e:	00 00       	nop
	_delay_us(240);
	DQ_OUT;
 190:	b8 9a       	sbi	0x17, 0	; 23
	S_DQ;
 192:	c0 9a       	sbi	0x18, 0	; 24
 194:	87 e5       	ldi	r24, 0x57	; 87
 196:	92 e0       	ldi	r25, 0x02	; 2
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <init_ds18b20+0x34>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <init_ds18b20+0x3a>
 19e:	00 00       	nop
 1a0:	08 95       	ret

000001a2 <readbyte>:


// Read a byte from the sensor
uchar readbyte(void)
{ uchar i = 0,data = 0;
	DQ_OUT;
 1a2:	b8 9a       	sbi	0x17, 0	; 23
 1a4:	98 e0       	ldi	r25, 0x08	; 8
}


// Read a byte from the sensor
uchar readbyte(void)
{ uchar i = 0,data = 0;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
	DQ_OUT;
	for (i=0; i<8; i++)
	{ C_DQ ;
 1a8:	c0 98       	cbi	0x18, 0	; 24
		data >>= 1;
 1aa:	86 95       	lsr	r24
 1ac:	28 e0       	ldi	r18, 0x08	; 8
 1ae:	2a 95       	dec	r18
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <readbyte+0xc>
		_delay_us(3);
		S_DQ;
 1b2:	c0 9a       	sbi	0x18, 0	; 24
		DQ_IN;
 1b4:	b8 98       	cbi	0x17, 0	; 23
 1b6:	20 e2       	ldi	r18, 0x20	; 32
 1b8:	2a 95       	dec	r18
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <readbyte+0x16>
		_delay_us(12);
		if(DQ)
 1bc:	b0 99       	sbic	0x16, 0	; 22
		data |= 0x80;
 1be:	80 68       	ori	r24, 0x80	; 128
		DQ_OUT;
 1c0:	b8 9a       	sbi	0x17, 0	; 23
		S_DQ;
 1c2:	c0 9a       	sbi	0x18, 0	; 24
 1c4:	28 e7       	ldi	r18, 0x78	; 120
 1c6:	2a 95       	dec	r18
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <readbyte+0x24>
 1ca:	2d e0       	ldi	r18, 0x0D	; 13
 1cc:	2a 95       	dec	r18
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <readbyte+0x2a>
 1d0:	00 00       	nop
 1d2:	91 50       	subi	r25, 0x01	; 1

// Read a byte from the sensor
uchar readbyte(void)
{ uchar i = 0,data = 0;
	DQ_OUT;
	for (i=0; i<8; i++)
 1d4:	49 f7       	brne	.-46     	; 0x1a8 <readbyte+0x6>
		S_DQ;
		_delay_us(45);
		_delay_us(5);
	}
	return(data);
}
 1d6:	08 95       	ret

000001d8 <writecommand>:

// Write a command to the sensor
void writecommand(uchar data)
{ uchar  i;
 1d8:	98 e0       	ldi	r25, 0x08	; 8
	for(i=0; i<8; i++)
	{ C_DQ;
 1da:	c0 98       	cbi	0x18, 0	; 24
 1dc:	28 e2       	ldi	r18, 0x28	; 40
 1de:	2a 95       	dec	r18
 1e0:	f1 f7       	brne	.-4      	; 0x1de <writecommand+0x6>
		_delay_us(15);
		if(data & 0x01)
 1e2:	80 ff       	sbrs	r24, 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <writecommand+0x12>
		S_DQ;
 1e6:	c0 9a       	sbi	0x18, 0	; 24
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <writecommand+0x14>
		else
		C_DQ;
 1ea:	c0 98       	cbi	0x18, 0	; 24
 1ec:	28 e7       	ldi	r18, 0x78	; 120
 1ee:	2a 95       	dec	r18
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <writecommand+0x16>
		_delay_us(45);
		data >>= 1;
 1f2:	86 95       	lsr	r24
		S_DQ;
 1f4:	c0 9a       	sbi	0x18, 0	; 24
 1f6:	25 e0       	ldi	r18, 0x05	; 5
 1f8:	2a 95       	dec	r18
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <writecommand+0x20>
 1fc:	00 00       	nop
 1fe:	91 50       	subi	r25, 0x01	; 1
}

// Write a command to the sensor
void writecommand(uchar data)
{ uchar  i;
	for(i=0; i<8; i++)
 200:	61 f7       	brne	.-40     	; 0x1da <writecommand+0x2>
		_delay_us(45);
		data >>= 1;
		S_DQ;
		_delay_us(2);
	}
}
 202:	08 95       	ret

00000204 <readtemp>:

// Read value from the sensor
uchar readtemp(void)
{ uint t;
	init_ds18b20();
 204:	af df       	rcall	.-162    	; 0x164 <init_ds18b20>
	// Convert
	writecommand(0xCC);
 206:	8c ec       	ldi	r24, 0xCC	; 204
 208:	e7 df       	rcall	.-50     	; 0x1d8 <writecommand>
	writecommand(0x44);
 20a:	84 e4       	ldi	r24, 0x44	; 68
 20c:	e5 df       	rcall	.-54     	; 0x1d8 <writecommand>
	init_ds18b20();
 20e:	aa df       	rcall	.-172    	; 0x164 <init_ds18b20>
	// Read Scratch memory area
	writecommand(0xCC);
 210:	8c ec       	ldi	r24, 0xCC	; 204
 212:	e2 df       	rcall	.-60     	; 0x1d8 <writecommand>
	writecommand(0xBE);
 214:	8e eb       	ldi	r24, 0xBE	; 190
 216:	e0 df       	rcall	.-64     	; 0x1d8 <writecommand>
	a = readbyte();
 218:	c4 df       	rcall	.-120    	; 0x1a2 <readbyte>
 21a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <a>
	b = readbyte();
 21e:	c1 df       	rcall	.-126    	; 0x1a2 <readbyte>
 220:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <b>
	t = b;
 224:	68 2f       	mov	r22, r24
 226:	70 e0       	ldi	r23, 0x00	; 0
	t <<= 8;
 228:	76 2f       	mov	r23, r22
 22a:	66 27       	eor	r22, r22
	t = t|a;
	tt = t*0.0625;
 22c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <a>
 230:	68 2b       	or	r22, r24
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	03 d1       	rcall	.+518    	; 0x43e <__floatunsisf>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	40 e8       	ldi	r20, 0x80	; 128
 23e:	5d e3       	ldi	r21, 0x3D	; 61
 240:	64 d1       	rcall	.+712    	; 0x50a <__mulsf3>
 242:	d1 d0       	rcall	.+418    	; 0x3e6 <__fixunssfsi>
 244:	86 2f       	mov	r24, r22
 246:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <tt>
	return(tt);
}
 24a:	08 95       	ret

0000024c <beep>:
	dsInit(PD0,DDD0, PINB0,0);
	beep();
}

void beep(){
	PORTD |= 1<<BUZZER;
 24c:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	80 e7       	ldi	r24, 0x70	; 112
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <beep+0x8>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <beep+0x12>
 25e:	00 00       	nop
	_delay_ms(100);
	PORTD &= ~(1<<BUZZER);
 260:	95 98       	cbi	0x12, 5	; 18
 262:	08 95       	ret

00000264 <initPinChangeInterrupts>:
}

void initPinChangeInterrupts(){
	GIMSK |= 1<<PCIE0; 
 264:	8b b7       	in	r24, 0x3b	; 59
 266:	80 62       	ori	r24, 0x20	; 32
 268:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 1<<PCINT1|1<<PCINT2|1<<PCINT3|1<<PCINT4;
 26a:	80 b5       	in	r24, 0x20	; 32
 26c:	8e 61       	ori	r24, 0x1E	; 30
 26e:	80 bd       	out	0x20, r24	; 32
	sei();
 270:	78 94       	sei
 272:	08 95       	ret

00000274 <init>:
		}	
	}
}

void init(){
	DDRB = 0x0;
 274:	17 ba       	out	0x17, r1	; 23
	PORTB = 0;
 276:	18 ba       	out	0x18, r1	; 24

	DDRD |= 1<<CS|1<<BUZZER;
 278:	81 b3       	in	r24, 0x11	; 17
 27a:	84 62       	ori	r24, 0x24	; 36
 27c:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1<<CS|0<<BUZZER;
 27e:	92 9a       	sbi	0x12, 2	; 18
	initPinChangeInterrupts();
 280:	f1 df       	rcall	.-30     	; 0x264 <initPinChangeInterrupts>
	ledInit();
 282:	0f df       	rcall	.-482    	; 0xa2 <ledInit>
	//dsInit(PORTB,DDRB, PINB,0);
	dsInit(PD0,DDD0, PINB0,0);
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	5b df       	rcall	.-330    	; 0x14c <dsInit>
	beep();
 296:	da df       	rcall	.-76     	; 0x24c <beep>
 298:	08 95       	ret

0000029a <main>:
	//CLKPR=0x80;
	//CLKPR=0x00;
	//#ifdef _OPTIMIZE_SIZE_
	//#pragma optsize+
	//#endif
	state = waiting;
 29a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <state>
	temperature = 0;
 29e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <temperature+0x1>
 2a2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temperature>
	temp = 0;
 2a6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp+0x1>
 2aa:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp>
	init();
 2ae:	e2 df       	rcall	.-60     	; 0x274 <init>
				if(tasks.set){
					temp = temperature;
					state = setting;
					tasks.set = false;
				}
				showValue(temperature);
 2b0:	0c e6       	ldi	r16, 0x6C	; 108
 2b2:	10 e0       	ldi	r17, 0x00	; 0
		switch(state){
			case waiting:
				setMode(0);
				if(tasks.set){
					temp = temperature;
					state = setting;
 2b4:	ff 24       	eor	r15, r15
 2b6:	f3 94       	inc	r15
				if(tasks.set){
					temperature = temp;
					state = waiting;
					tasks.set = false;
				}
				showValue(temp);
 2b8:	ca e6       	ldi	r28, 0x6A	; 106
 2ba:	d0 e0       	ldi	r29, 0x00	; 0
	temp = 0;
	init();
	
	while (1)
	{
		temperature = readtemp();
 2bc:	a3 df       	rcall	.-186    	; 0x204 <readtemp>
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temperature+0x1>
 2c4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temperature>
	
		switch(state){
 2c8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <state>
 2cc:	88 23       	and	r24, r24
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <main+0x3c>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	d1 f0       	breq	.+52     	; 0x308 <main+0x6e>
 2d4:	f3 cf       	rjmp	.-26     	; 0x2bc <main+0x22>
			case waiting:
				setMode(0);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	eb de       	rcall	.-554    	; 0xb0 <setMode>
				if(tasks.set){
 2da:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 2de:	82 ff       	sbrs	r24, 2
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <main+0x66>
					temp = temperature;
 2e2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temperature>
 2e6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temperature+0x1>
 2ea:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp+0x1>
 2ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp>
					state = setting;
 2f2:	f0 92 6e 00 	sts	0x006E, r15	; 0x80006e <state>
					tasks.set = false;
 2f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
				}
				showValue(temperature);
 300:	f8 01       	movw	r30, r16
 302:	80 81       	ld	r24, Z
 304:	d8 de       	rcall	.-592    	; 0xb6 <showValue>
				break;
 306:	da cf       	rjmp	.-76     	; 0x2bc <main+0x22>
			case setting:
				setMode(1);
 308:	8f 2d       	mov	r24, r15
 30a:	d2 de       	rcall	.-604    	; 0xb0 <setMode>
				if(tasks.up){
 30c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 310:	80 ff       	sbrs	r24, 0
 312:	0e c0       	rjmp	.+28     	; 0x330 <main+0x96>
					temp++;
 314:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp>
 318:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp+0x1>
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp+0x1>
 322:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp>
					tasks.up = false;
 326:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 32a:	8e 7f       	andi	r24, 0xFE	; 254
 32c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
					}
				if(tasks.down){
 330:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 334:	81 ff       	sbrs	r24, 1
 336:	0e c0       	rjmp	.+28     	; 0x354 <main+0xba>
					temp--;
 338:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp>
 33c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp+0x1>
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp+0x1>
 346:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp>
					tasks.down = false;
 34a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 34e:	8d 7f       	andi	r24, 0xFD	; 253
 350:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
					}
				if(tasks.reset){
 354:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 358:	83 ff       	sbrs	r24, 3
 35a:	07 c0       	rjmp	.+14     	; 0x36a <main+0xd0>
					temp = 0;
 35c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp+0x1>
 360:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp>
					tasks.reset = false;
 364:	87 7f       	andi	r24, 0xF7	; 247
 366:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
					}
				if(tasks.set){
 36a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 36e:	82 ff       	sbrs	r24, 2
 370:	0f c0       	rjmp	.+30     	; 0x390 <main+0xf6>
					temperature = temp;
 372:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp>
 376:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp+0x1>
 37a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temperature+0x1>
 37e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temperature>
					state = waiting;
 382:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <state>
					tasks.set = false;
 386:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 38a:	8b 7f       	andi	r24, 0xFB	; 251
 38c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
				}
				showValue(temp);
 390:	88 81       	ld	r24, Y
 392:	91 de       	rcall	.-734    	; 0xb6 <showValue>
				break;
 394:	93 cf       	rjmp	.-218    	; 0x2bc <main+0x22>

00000396 <__vector_11>:





ISR(PCINT_vect){
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	8f 93       	push	r24
	if(PINB & UP){
 3a2:	b1 9b       	sbis	0x16, 1	; 22
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <__vector_11+0x1a>
		tasks.up = true;
 3a6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 3aa:	81 60       	ori	r24, 0x01	; 1
 3ac:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
	}
	if(PINB & DOWN){
 3b0:	b2 9b       	sbis	0x16, 2	; 22
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <__vector_11+0x28>
		tasks.down = true;
 3b4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 3b8:	82 60       	ori	r24, 0x02	; 2
 3ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
	}
	if(PINB & SET){
 3be:	b3 9b       	sbis	0x16, 3	; 22
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <__vector_11+0x36>
		//if(tasks.set == false)
			tasks.set = true;
 3c2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 3c6:	84 60       	ori	r24, 0x04	; 4
 3c8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
	}
	if(PINB & RESET){
 3cc:	b4 9b       	sbis	0x16, 4	; 22
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <__vector_11+0x44>
		tasks.reset = true;
 3d0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <tasks>
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <tasks>
	}
}
 3da:	8f 91       	pop	r24
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__fixunssfsi>:
 3e6:	70 d0       	rcall	.+224    	; 0x4c8 <__fp_splitA>
 3e8:	88 f0       	brcs	.+34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ea:	9f 57       	subi	r25, 0x7F	; 127
 3ec:	90 f0       	brcs	.+36     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ee:	b9 2f       	mov	r27, r25
 3f0:	99 27       	eor	r25, r25
 3f2:	b7 51       	subi	r27, 0x17	; 23
 3f4:	a0 f0       	brcs	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f6:	d1 f0       	breq	.+52     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	1a f0       	brmi	.+6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 402:	ba 95       	dec	r27
 404:	c9 f7       	brne	.-14     	; 0x3f8 <__fixunssfsi+0x12>
 406:	12 c0       	rjmp	.+36     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 408:	b1 30       	cpi	r27, 0x01	; 1
 40a:	81 f0       	breq	.+32     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 40c:	77 d0       	rcall	.+238    	; 0x4fc <__fp_zero>
 40e:	b1 e0       	ldi	r27, 0x01	; 1
 410:	08 95       	ret
 412:	74 c0       	rjmp	.+232    	; 0x4fc <__fp_zero>
 414:	67 2f       	mov	r22, r23
 416:	78 2f       	mov	r23, r24
 418:	88 27       	eor	r24, r24
 41a:	b8 5f       	subi	r27, 0xF8	; 248
 41c:	39 f0       	breq	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41e:	b9 3f       	cpi	r27, 0xF9	; 249
 420:	cc f3       	brlt	.-14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 422:	86 95       	lsr	r24
 424:	77 95       	ror	r23
 426:	67 95       	ror	r22
 428:	b3 95       	inc	r27
 42a:	d9 f7       	brne	.-10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 42c:	3e f4       	brtc	.+14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 42e:	90 95       	com	r25
 430:	80 95       	com	r24
 432:	70 95       	com	r23
 434:	61 95       	neg	r22
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	08 95       	ret

0000043e <__floatunsisf>:
 43e:	e8 94       	clt
 440:	09 c0       	rjmp	.+18     	; 0x454 <__floatsisf+0x12>

00000442 <__floatsisf>:
 442:	97 fb       	bst	r25, 7
 444:	3e f4       	brtc	.+14     	; 0x454 <__floatsisf+0x12>
 446:	90 95       	com	r25
 448:	80 95       	com	r24
 44a:	70 95       	com	r23
 44c:	61 95       	neg	r22
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	8f 4f       	sbci	r24, 0xFF	; 255
 452:	9f 4f       	sbci	r25, 0xFF	; 255
 454:	99 23       	and	r25, r25
 456:	a9 f0       	breq	.+42     	; 0x482 <__floatsisf+0x40>
 458:	f9 2f       	mov	r31, r25
 45a:	96 e9       	ldi	r25, 0x96	; 150
 45c:	bb 27       	eor	r27, r27
 45e:	93 95       	inc	r25
 460:	f6 95       	lsr	r31
 462:	87 95       	ror	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	b7 95       	ror	r27
 46a:	f1 11       	cpse	r31, r1
 46c:	f8 cf       	rjmp	.-16     	; 0x45e <__floatsisf+0x1c>
 46e:	fa f4       	brpl	.+62     	; 0x4ae <__floatsisf+0x6c>
 470:	bb 0f       	add	r27, r27
 472:	11 f4       	brne	.+4      	; 0x478 <__floatsisf+0x36>
 474:	60 ff       	sbrs	r22, 0
 476:	1b c0       	rjmp	.+54     	; 0x4ae <__floatsisf+0x6c>
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	16 c0       	rjmp	.+44     	; 0x4ae <__floatsisf+0x6c>
 482:	88 23       	and	r24, r24
 484:	11 f0       	breq	.+4      	; 0x48a <__floatsisf+0x48>
 486:	96 e9       	ldi	r25, 0x96	; 150
 488:	11 c0       	rjmp	.+34     	; 0x4ac <__floatsisf+0x6a>
 48a:	77 23       	and	r23, r23
 48c:	21 f0       	breq	.+8      	; 0x496 <__floatsisf+0x54>
 48e:	9e e8       	ldi	r25, 0x8E	; 142
 490:	87 2f       	mov	r24, r23
 492:	76 2f       	mov	r23, r22
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__floatsisf+0x5e>
 496:	66 23       	and	r22, r22
 498:	71 f0       	breq	.+28     	; 0x4b6 <__floatsisf+0x74>
 49a:	96 e8       	ldi	r25, 0x86	; 134
 49c:	86 2f       	mov	r24, r22
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	2a f0       	brmi	.+10     	; 0x4ae <__floatsisf+0x6c>
 4a4:	9a 95       	dec	r25
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	da f7       	brpl	.-10     	; 0x4a4 <__floatsisf+0x62>
 4ae:	88 0f       	add	r24, r24
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	97 f9       	bld	r25, 7
 4b6:	08 95       	ret

000004b8 <__fp_split3>:
 4b8:	57 fd       	sbrc	r21, 7
 4ba:	90 58       	subi	r25, 0x80	; 128
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <__fp_splitA+0x10>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__fp_splitA+0x1a>
 4c6:	47 95       	ror	r20

000004c8 <__fp_splitA>:
 4c8:	88 0f       	add	r24, r24
 4ca:	97 fb       	bst	r25, 7
 4cc:	99 1f       	adc	r25, r25
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <__fp_splitA+0x20>
 4d0:	9f 3f       	cpi	r25, 0xFF	; 255
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <__fp_splitA+0x2a>
 4d4:	87 95       	ror	r24
 4d6:	08 95       	ret
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	14 06       	cpc	r1, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	f2 cf       	rjmp	.-28     	; 0x4c6 <__fp_split3+0xe>
 4e2:	46 95       	lsr	r20
 4e4:	f1 df       	rcall	.-30     	; 0x4c8 <__fp_splitA>
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <__fp_splitA+0x30>
 4e8:	16 16       	cp	r1, r22
 4ea:	17 06       	cpc	r1, r23
 4ec:	18 06       	cpc	r1, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	f1 cf       	rjmp	.-30     	; 0x4d4 <__fp_splitA+0xc>
 4f2:	86 95       	lsr	r24
 4f4:	71 05       	cpc	r23, r1
 4f6:	61 05       	cpc	r22, r1
 4f8:	08 94       	sec
 4fa:	08 95       	ret

000004fc <__fp_zero>:
 4fc:	e8 94       	clt

000004fe <__fp_szero>:
 4fe:	bb 27       	eor	r27, r27
 500:	66 27       	eor	r22, r22
 502:	77 27       	eor	r23, r23
 504:	cb 01       	movw	r24, r22
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <__mulsf3>:
 50a:	0a d0       	rcall	.+20     	; 0x520 <__mulsf3x>
 50c:	80 c0       	rjmp	.+256    	; 0x60e <__fp_round>
 50e:	71 d0       	rcall	.+226    	; 0x5f2 <__fp_pscA>
 510:	28 f0       	brcs	.+10     	; 0x51c <__mulsf3+0x12>
 512:	76 d0       	rcall	.+236    	; 0x600 <__fp_pscB>
 514:	18 f0       	brcs	.+6      	; 0x51c <__mulsf3+0x12>
 516:	95 23       	and	r25, r21
 518:	09 f0       	breq	.+2      	; 0x51c <__mulsf3+0x12>
 51a:	62 c0       	rjmp	.+196    	; 0x5e0 <__fp_inf>
 51c:	67 c0       	rjmp	.+206    	; 0x5ec <__fp_nan>
 51e:	ef cf       	rjmp	.-34     	; 0x4fe <__fp_szero>

00000520 <__mulsf3x>:
 520:	cb df       	rcall	.-106    	; 0x4b8 <__fp_split3>
 522:	a8 f3       	brcs	.-22     	; 0x50e <__mulsf3+0x4>

00000524 <__mulsf3_pse>:
 524:	99 23       	and	r25, r25
 526:	d9 f3       	breq	.-10     	; 0x51e <__mulsf3+0x14>
 528:	55 23       	and	r21, r21
 52a:	c9 f3       	breq	.-14     	; 0x51e <__mulsf3+0x14>
 52c:	95 0f       	add	r25, r21
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	55 1f       	adc	r21, r21
 532:	aa 27       	eor	r26, r26
 534:	ee 27       	eor	r30, r30
 536:	ff 27       	eor	r31, r31
 538:	bb 27       	eor	r27, r27
 53a:	00 24       	eor	r0, r0
 53c:	08 94       	sec
 53e:	67 95       	ror	r22
 540:	20 f4       	brcc	.+8      	; 0x54a <__mulsf3_pse+0x26>
 542:	e2 0f       	add	r30, r18
 544:	f3 1f       	adc	r31, r19
 546:	b4 1f       	adc	r27, r20
 548:	0a 1e       	adc	r0, r26
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	44 1f       	adc	r20, r20
 550:	aa 1f       	adc	r26, r26
 552:	66 95       	lsr	r22
 554:	a9 f7       	brne	.-22     	; 0x540 <__mulsf3_pse+0x1c>
 556:	77 95       	ror	r23
 558:	30 f4       	brcc	.+12     	; 0x566 <__mulsf3_pse+0x42>
 55a:	f3 0f       	add	r31, r19
 55c:	b4 1f       	adc	r27, r20
 55e:	0a 1e       	adc	r0, r26
 560:	12 1e       	adc	r1, r18
 562:	08 f4       	brcc	.+2      	; 0x566 <__mulsf3_pse+0x42>
 564:	63 95       	inc	r22
 566:	33 0f       	add	r19, r19
 568:	44 1f       	adc	r20, r20
 56a:	aa 1f       	adc	r26, r26
 56c:	22 1f       	adc	r18, r18
 56e:	76 95       	lsr	r23
 570:	99 f7       	brne	.-26     	; 0x558 <__mulsf3_pse+0x34>
 572:	87 95       	ror	r24
 574:	20 f4       	brcc	.+8      	; 0x57e <__mulsf3_pse+0x5a>
 576:	b4 0f       	add	r27, r20
 578:	0a 1e       	adc	r0, r26
 57a:	12 1e       	adc	r1, r18
 57c:	63 1f       	adc	r22, r19
 57e:	44 0f       	add	r20, r20
 580:	aa 1f       	adc	r26, r26
 582:	22 1f       	adc	r18, r18
 584:	33 1f       	adc	r19, r19
 586:	86 95       	lsr	r24
 588:	a9 f7       	brne	.-22     	; 0x574 <__mulsf3_pse+0x50>
 58a:	86 2f       	mov	r24, r22
 58c:	71 2d       	mov	r23, r1
 58e:	60 2d       	mov	r22, r0
 590:	11 24       	eor	r1, r1
 592:	9f 57       	subi	r25, 0x7F	; 127
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	8a f0       	brmi	.+34     	; 0x5ba <__mulsf3_pse+0x96>
 598:	e1 f0       	breq	.+56     	; 0x5d2 <__mulsf3_pse+0xae>
 59a:	88 23       	and	r24, r24
 59c:	4a f0       	brmi	.+18     	; 0x5b0 <__mulsf3_pse+0x8c>
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	bb 1f       	adc	r27, r27
 5a4:	66 1f       	adc	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	91 50       	subi	r25, 0x01	; 1
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	a9 f7       	brne	.-22     	; 0x59a <__mulsf3_pse+0x76>
 5b0:	9e 3f       	cpi	r25, 0xFE	; 254
 5b2:	51 05       	cpc	r21, r1
 5b4:	70 f0       	brcs	.+28     	; 0x5d2 <__mulsf3_pse+0xae>
 5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <__fp_inf>
 5b8:	a2 cf       	rjmp	.-188    	; 0x4fe <__fp_szero>
 5ba:	5f 3f       	cpi	r21, 0xFF	; 255
 5bc:	ec f3       	brlt	.-6      	; 0x5b8 <__mulsf3_pse+0x94>
 5be:	98 3e       	cpi	r25, 0xE8	; 232
 5c0:	dc f3       	brlt	.-10     	; 0x5b8 <__mulsf3_pse+0x94>
 5c2:	86 95       	lsr	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f7 95       	ror	r31
 5cc:	e7 95       	ror	r30
 5ce:	9f 5f       	subi	r25, 0xFF	; 255
 5d0:	c1 f7       	brne	.-16     	; 0x5c2 <__mulsf3_pse+0x9e>
 5d2:	fe 2b       	or	r31, r30
 5d4:	88 0f       	add	r24, r24
 5d6:	91 1d       	adc	r25, r1
 5d8:	96 95       	lsr	r25
 5da:	87 95       	ror	r24
 5dc:	97 f9       	bld	r25, 7
 5de:	08 95       	ret

000005e0 <__fp_inf>:
 5e0:	97 f9       	bld	r25, 7
 5e2:	9f 67       	ori	r25, 0x7F	; 127
 5e4:	80 e8       	ldi	r24, 0x80	; 128
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	08 95       	ret

000005ec <__fp_nan>:
 5ec:	9f ef       	ldi	r25, 0xFF	; 255
 5ee:	80 ec       	ldi	r24, 0xC0	; 192
 5f0:	08 95       	ret

000005f2 <__fp_pscA>:
 5f2:	00 24       	eor	r0, r0
 5f4:	0a 94       	dec	r0
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	09 06       	cpc	r0, r25
 5fe:	08 95       	ret

00000600 <__fp_pscB>:
 600:	00 24       	eor	r0, r0
 602:	0a 94       	dec	r0
 604:	12 16       	cp	r1, r18
 606:	13 06       	cpc	r1, r19
 608:	14 06       	cpc	r1, r20
 60a:	05 06       	cpc	r0, r21
 60c:	08 95       	ret

0000060e <__fp_round>:
 60e:	09 2e       	mov	r0, r25
 610:	03 94       	inc	r0
 612:	00 0c       	add	r0, r0
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0xc>
 616:	88 23       	and	r24, r24
 618:	52 f0       	brmi	.+20     	; 0x62e <__fp_round+0x20>
 61a:	bb 0f       	add	r27, r27
 61c:	40 f4       	brcc	.+16     	; 0x62e <__fp_round+0x20>
 61e:	bf 2b       	or	r27, r31
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0x18>
 622:	60 ff       	sbrs	r22, 0
 624:	04 c0       	rjmp	.+8      	; 0x62e <__fp_round+0x20>
 626:	6f 5f       	subi	r22, 0xFF	; 255
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__udivmodqi4>:
 630:	99 1b       	sub	r25, r25
 632:	79 e0       	ldi	r23, 0x09	; 9
 634:	04 c0       	rjmp	.+8      	; 0x63e <__udivmodqi4_ep>

00000636 <__udivmodqi4_loop>:
 636:	99 1f       	adc	r25, r25
 638:	96 17       	cp	r25, r22
 63a:	08 f0       	brcs	.+2      	; 0x63e <__udivmodqi4_ep>
 63c:	96 1b       	sub	r25, r22

0000063e <__udivmodqi4_ep>:
 63e:	88 1f       	adc	r24, r24
 640:	7a 95       	dec	r23
 642:	c9 f7       	brne	.-14     	; 0x636 <__udivmodqi4_loop>
 644:	80 95       	com	r24
 646:	08 95       	ret

00000648 <__divmodhi4>:
 648:	97 fb       	bst	r25, 7
 64a:	07 2e       	mov	r0, r23
 64c:	16 f4       	brtc	.+4      	; 0x652 <__divmodhi4+0xa>
 64e:	00 94       	com	r0
 650:	06 d0       	rcall	.+12     	; 0x65e <__divmodhi4_neg1>
 652:	77 fd       	sbrc	r23, 7
 654:	08 d0       	rcall	.+16     	; 0x666 <__divmodhi4_neg2>
 656:	0b d0       	rcall	.+22     	; 0x66e <__udivmodhi4>
 658:	07 fc       	sbrc	r0, 7
 65a:	05 d0       	rcall	.+10     	; 0x666 <__divmodhi4_neg2>
 65c:	3e f4       	brtc	.+14     	; 0x66c <__divmodhi4_exit>

0000065e <__divmodhi4_neg1>:
 65e:	90 95       	com	r25
 660:	81 95       	neg	r24
 662:	9f 4f       	sbci	r25, 0xFF	; 255
 664:	08 95       	ret

00000666 <__divmodhi4_neg2>:
 666:	70 95       	com	r23
 668:	61 95       	neg	r22
 66a:	7f 4f       	sbci	r23, 0xFF	; 255

0000066c <__divmodhi4_exit>:
 66c:	08 95       	ret

0000066e <__udivmodhi4>:
 66e:	aa 1b       	sub	r26, r26
 670:	bb 1b       	sub	r27, r27
 672:	51 e1       	ldi	r21, 0x11	; 17
 674:	07 c0       	rjmp	.+14     	; 0x684 <__udivmodhi4_ep>

00000676 <__udivmodhi4_loop>:
 676:	aa 1f       	adc	r26, r26
 678:	bb 1f       	adc	r27, r27
 67a:	a6 17       	cp	r26, r22
 67c:	b7 07       	cpc	r27, r23
 67e:	10 f0       	brcs	.+4      	; 0x684 <__udivmodhi4_ep>
 680:	a6 1b       	sub	r26, r22
 682:	b7 0b       	sbc	r27, r23

00000684 <__udivmodhi4_ep>:
 684:	88 1f       	adc	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	5a 95       	dec	r21
 68a:	a9 f7       	brne	.-22     	; 0x676 <__udivmodhi4_loop>
 68c:	80 95       	com	r24
 68e:	90 95       	com	r25
 690:	bc 01       	movw	r22, r24
 692:	cd 01       	movw	r24, r26
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
