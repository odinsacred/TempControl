
TemperatureController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000001cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000792  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005cd  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  00000ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000384  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000204  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	5f c0       	rjmp	.+190    	; 0xd6 <__vector_11>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	3e d0       	rcall	.+124    	; 0xbc <main>
  40:	89 c0       	rjmp	.+274    	; 0x154 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <initPinChangeInterrupts>:
	spiInit();
}


void initPinChangeInterrupts(){
	GIMSK |= 1<<PCIE0; 
  44:	8b b7       	in	r24, 0x3b	; 59
  46:	80 62       	ori	r24, 0x20	; 32
  48:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= 1<<PCINT1|1<<PCINT2|1<<PCINT3|1<<PCINT4;
  4a:	80 b5       	in	r24, 0x20	; 32
  4c:	8e 61       	ori	r24, 0x1E	; 30
  4e:	80 bd       	out	0x20, r24	; 32
	sei();
  50:	78 94       	sei
  52:	08 95       	ret

00000054 <spiInit>:
}

void spiInit(){
	DDRB |= (1<<PB4 | 1<<PB6 | 1<<PB7);
  54:	87 b3       	in	r24, 0x17	; 23
  56:	80 6d       	ori	r24, 0xD0	; 208
  58:	87 bb       	out	0x17, r24	; 23
	DDRB&=~(1<<PB5);
  5a:	bd 98       	cbi	0x17, 5	; 23
	PORTB&=~(1<<PB4 | 1<<PB6 | 1<<PB7);
  5c:	88 b3       	in	r24, 0x18	; 24
  5e:	8f 72       	andi	r24, 0x2F	; 47
  60:	88 bb       	out	0x18, r24	; 24
  62:	08 95       	ret

00000064 <init>:
		
	}
}

void init(){
	DDRB = 0x1E;
  64:	8e e1       	ldi	r24, 0x1E	; 30
  66:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
  68:	18 ba       	out	0x18, r1	; 24

	DDRD |= 1<<CS;
  6a:	8a 9a       	sbi	0x11, 2	; 17
	PORTD |= 1<<CS;
  6c:	92 9a       	sbi	0x12, 2	; 18
	initPinChangeInterrupts();
  6e:	ea df       	rcall	.-44     	; 0x44 <initPinChangeInterrupts>
	spiInit();
  70:	f1 df       	rcall	.-30     	; 0x54 <spiInit>
  72:	08 95       	ret

00000074 <sendByte>:
	DDRB&=~(1<<PB5);
	PORTB&=~(1<<PB4 | 1<<PB6 | 1<<PB7);
}

void sendByte(char b){
	USIDR = b;
  74:	8f b9       	out	0x0f, r24	; 15
	USISR |= (1<<USIOIF);//сбрасываем флаг
  76:	76 9a       	sbi	0x0e, 6	; 14
	while(!(USISR & (1<<USIOIF)))//пока нет флага окончания передачи
  78:	76 99       	sbic	0x0e, 6	; 14
  7a:	09 c0       	rjmp	.+18     	; 0x8e <sendByte+0x1a>
	{
		USICR |= (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);//формируем тактирующие импульсы
  7c:	8d b1       	in	r24, 0x0d	; 13
  7e:	8b 61       	ori	r24, 0x1B	; 27
  80:	8d b9       	out	0x0d, r24	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	86 e0       	ldi	r24, 0x06	; 6
  84:	8a 95       	dec	r24
  86:	f1 f7       	brne	.-4      	; 0x84 <sendByte+0x10>
  88:	00 c0       	rjmp	.+0      	; 0x8a <sendByte+0x16>
}

void sendByte(char b){
	USIDR = b;
	USISR |= (1<<USIOIF);//сбрасываем флаг
	while(!(USISR & (1<<USIOIF)))//пока нет флага окончания передачи
  8a:	76 9b       	sbis	0x0e, 6	; 14
  8c:	f7 cf       	rjmp	.-18     	; 0x7c <sendByte+0x8>
  8e:	08 95       	ret

00000090 <sendPacket>:
		USICR |= (1<<USIWM0) | (1<<USICS1) | (1<<USICLK) | (1<<USITC);//формируем тактирующие импульсы
		_delay_us(5);
	}
}

void sendPacket(unsigned char addr, unsigned char data){	
  90:	cf 93       	push	r28
  92:	c6 2f       	mov	r28, r22
	PORTD &= ~(1<<CS);
  94:	92 98       	cbi	0x12, 2	; 18
	sendByte(addr);
  96:	ee df       	rcall	.-36     	; 0x74 <sendByte>
	sendByte(data);
  98:	8c 2f       	mov	r24, r28
  9a:	ec df       	rcall	.-40     	; 0x74 <sendByte>
	PORTD |= 1<<CS;
  9c:	92 9a       	sbi	0x12, 2	; 18
}
  9e:	cf 91       	pop	r28
  a0:	08 95       	ret

000000a2 <displayTest>:
	char mode = 0b00000001; 
	//sendPacket(0x09,0xFF); //decode mode on
	//sendPacket(0x0A,0xFF);
	//sendPacket(0x09,0xFF);
	//sendPacket(0x09,0xFF);
	sendPacket(addr,mode); //shutdown off
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	f4 df       	rcall	.-24     	; 0x90 <sendPacket>
	//_delay_ms(100);
	addr = 0b00001111;
	mode = 0b00000001;
	sendPacket(addr,mode); // display test 
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	f1 df       	rcall	.-30     	; 0x90 <sendPacket>
	//_delay_ms(100);
	addr = 0b00001001;
	mode = 0b11111111; //decode mode on
	sendPacket(addr,mode);
  ae:	6f ef       	ldi	r22, 0xFF	; 255
  b0:	89 e0       	ldi	r24, 0x09	; 9
  b2:	ee df       	rcall	.-36     	; 0x90 <sendPacket>
	//_delay_ms(100);
	addr = 0b00001011;
	mode = 0b00000011; //scan limit 0 1 2 3
	sendPacket(addr,mode);
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	8b e0       	ldi	r24, 0x0B	; 11
  b8:	eb df       	rcall	.-42     	; 0x90 <sendPacket>
  ba:	08 95       	ret

000000bc <main>:
enum states state;

volatile char s;
int main(void)
{
	state = waiting;
  bc:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <state>
	temperature = 0;
  c0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <temperature+0x1>
  c4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <temperature>
	temp = 0;
  c8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <temp+0x1>
  cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <temp>
	init();
  d0:	c9 df       	rcall	.-110    	; 0x64 <init>
	displayTest();
  d2:	e7 df       	rcall	.-50     	; 0xa2 <displayTest>
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x18>

000000d6 <__vector_11>:
	//addr = 0b00000010;
	//mode = 0b00000001;
	//sendPacket(addr,mode);
}

ISR(PCINT_vect){
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	2f 93       	push	r18
  e2:	3f 93       	push	r19
  e4:	4f 93       	push	r20
  e6:	5f 93       	push	r21
  e8:	6f 93       	push	r22
  ea:	7f 93       	push	r23
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	af 93       	push	r26
  f2:	bf 93       	push	r27
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	if(PINB & UP){
  f8:	b1 9b       	sbis	0x16, 1	; 22
  fa:	06 c0       	rjmp	.+12     	; 0x108 <__stack+0x29>
		tasks.up = true;
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		displayTest();
 106:	cd df       	rcall	.-102    	; 0xa2 <displayTest>
		//spiSend(0xff);
		//PORTD = 0x4; 
	}
	if(PINB & DOWN){
 108:	b2 9b       	sbis	0x16, 2	; 22
 10a:	05 c0       	rjmp	.+10     	; 0x116 <__stack+0x37>
		tasks.down = true;
 10c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		//PORTD = 0x8; 
	}
	if(PINB & SET){
 116:	b3 9b       	sbis	0x16, 3	; 22
 118:	05 c0       	rjmp	.+10     	; 0x124 <__stack+0x45>
		tasks.set = true;
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		//PORTD = 0x10; 
	}
	if(PINB & RESET){
 124:	b4 9b       	sbis	0x16, 4	; 22
 126:	05 c0       	rjmp	.+10     	; 0x132 <__stack+0x53>
		tasks.reset = true;
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		//PORTD = 0x20; 
	}
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
