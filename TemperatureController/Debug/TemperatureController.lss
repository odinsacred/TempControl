
TemperatureController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800062  00800062  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154d  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b11  00000000  00000000  00001e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d80  00000000  00000000  0000291e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000036a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000610  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b3  00000000  00000000  00003f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000048c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	b0 c2       	rjmp	.+1376   	; 0x56e <__vector_6>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 e6       	ldi	r30, 0x68	; 104
  36:	f6 e0       	ldi	r31, 0x06	; 6
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a7 39       	cpi	r26, 0x97	; 151
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	7f d1       	rcall	.+766    	; 0x354 <main>
  56:	06 c3       	rjmp	.+1548   	; 0x664 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <spi_init>:
void led_decode_mode_on(){
	spi_send_packet(0b00001001, 0b00000111);
}

void led_decode_mode_off(){
	spi_send_packet(0b00001001, 0b00000000);
  5a:	87 b3       	in	r24, 0x17	; 23
  5c:	80 6c       	ori	r24, 0xC0	; 192
  5e:	87 bb       	out	0x17, r24	; 23
  60:	bd 98       	cbi	0x17, 5	; 23
  62:	88 b3       	in	r24, 0x18	; 24
  64:	8f 73       	andi	r24, 0x3F	; 63
  66:	88 bb       	out	0x18, r24	; 24
  68:	08 95       	ret

0000006a <spi_send_byte>:
  6a:	8f b9       	out	0x0f, r24	; 15
  6c:	76 9a       	sbi	0x0e, 6	; 14
  6e:	76 99       	sbic	0x0e, 6	; 14
  70:	09 c0       	rjmp	.+18     	; 0x84 <spi_send_byte+0x1a>
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	8b 61       	ori	r24, 0x1B	; 27
  76:	8d b9       	out	0x0d, r24	; 13
  78:	86 e0       	ldi	r24, 0x06	; 6
  7a:	8a 95       	dec	r24
  7c:	f1 f7       	brne	.-4      	; 0x7a <spi_send_byte+0x10>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <spi_send_byte+0x16>
  80:	76 9b       	sbis	0x0e, 6	; 14
  82:	f7 cf       	rjmp	.-18     	; 0x72 <spi_send_byte+0x8>
  84:	08 95       	ret

00000086 <spi_send_packet>:
  86:	cf 93       	push	r28
  88:	c6 2f       	mov	r28, r22
  8a:	92 98       	cbi	0x12, 2	; 18
  8c:	ee df       	rcall	.-36     	; 0x6a <spi_send_byte>
  8e:	8c 2f       	mov	r24, r28
  90:	ec df       	rcall	.-40     	; 0x6a <spi_send_byte>
  92:	92 9a       	sbi	0x12, 2	; 18
  94:	cf 91       	pop	r28
  96:	08 95       	ret

00000098 <led_init>:
	spi_send_packet(INFO_POS, code);
}


void led_init(){
	spi_init();
  98:	e0 df       	rcall	.-64     	; 0x5a <spi_init>
void led_display_test_off(){
	spi_send_packet(0b00001111, 0b00000000);
}

void led_decode_mode_on(){
	spi_send_packet(0b00001001, 0b00000111);
  9a:	67 e0       	ldi	r22, 0x07	; 7
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	f3 df       	rcall	.-26     	; 0x86 <spi_send_packet>
void led_decode_mode_off(){
	spi_send_packet(0b00001001, 0b00000000);
}

void led_set_scan_limit(){
	spi_send_packet(0b00001011, 0b00000011);
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	8b e0       	ldi	r24, 0x0B	; 11
  a4:	f0 df       	rcall	.-32     	; 0x86 <spi_send_packet>
void led_shutdown_mode_on(){
	spi_send_packet(0b00001100,0b00000000); //shutdown on
}

void led_shutdown_mode_off(){
	spi_send_packet(0b00001100,0b00000001); //shutdown off
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	8c e0       	ldi	r24, 0x0C	; 12
  aa:	ed df       	rcall	.-38     	; 0x86 <spi_send_packet>
  ac:	08 95       	ret

000000ae <led_show_value>:
void led_show_digit(uint8_t digit, uint8_t pos){
	spi_send_packet(pos, digit);
}


void led_show_value(uint8_t value, char symbol){
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	38 2f       	mov	r19, r24
  b6:	d6 2f       	mov	r29, r22
	uint8_t hundreds = value/100;
  b8:	64 e6       	ldi	r22, 0x64	; 100
  ba:	a1 d2       	rcall	.+1346   	; 0x5fe <__udivmodqi4>
  bc:	28 2f       	mov	r18, r24
	uint8_t decs = (value - (hundreds*100))/10;
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	ac 01       	movw	r20, r24
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	48 0f       	add	r20, r24
  cc:	59 1f       	adc	r21, r25
  ce:	ca 01       	movw	r24, r20
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	48 0f       	add	r20, r24
  da:	59 1f       	adc	r21, r25
  dc:	44 0f       	add	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	83 2f       	mov	r24, r19
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	84 1b       	sub	r24, r20
  ea:	95 0b       	sbc	r25, r21
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	92 d2       	rcall	.+1316   	; 0x616 <__divmodhi4>
  f2:	16 2f       	mov	r17, r22
	uint8_t units = (value - (hundreds*100) - decs*10);
  f4:	82 2f       	mov	r24, r18
  f6:	88 0f       	add	r24, r24
  f8:	88 0f       	add	r24, r24
  fa:	82 0f       	add	r24, r18
  fc:	c8 2f       	mov	r28, r24
  fe:	c2 95       	swap	r28
 100:	cc 0f       	add	r28, r28
 102:	c0 7e       	andi	r28, 0xE0	; 224
 104:	c8 1b       	sub	r28, r24
 106:	c2 0f       	add	r28, r18
 108:	c3 0f       	add	r28, r19
 10a:	96 2f       	mov	r25, r22
 10c:	92 95       	swap	r25
 10e:	99 0f       	add	r25, r25
 110:	90 7e       	andi	r25, 0xE0	; 224
 112:	96 1b       	sub	r25, r22
 114:	99 0f       	add	r25, r25
 116:	99 0f       	add	r25, r25
 118:	96 1b       	sub	r25, r22
 11a:	99 0f       	add	r25, r25
 11c:	c9 0f       	add	r28, r25
	led_set_scan_limit();
	led_shutdown_mode_off();
}

void led_show_digit(uint8_t digit, uint8_t pos){
	spi_send_packet(pos, digit);
 11e:	62 2f       	mov	r22, r18
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	b1 df       	rcall	.-158    	; 0x86 <spi_send_packet>
 124:	61 2f       	mov	r22, r17
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	ae df       	rcall	.-164    	; 0x86 <spi_send_packet>
 12a:	6c 2f       	mov	r22, r28
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	ab df       	rcall	.-170    	; 0x86 <spi_send_packet>
void led_set_scan_limit(){
	spi_send_packet(0b00001011, 0b00000011);
}

void led_show_symbol(char code){
	spi_send_packet(INFO_POS, code);
 130:	6d 2f       	mov	r22, r29
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	a8 df       	rcall	.-176    	; 0x86 <spi_send_packet>
	uint8_t units = (value - (hundreds*100) - decs*10);
	led_show_digit(hundreds,1);
	led_show_digit(decs,2);
	led_show_digit(units,3);
	led_show_symbol(symbol);
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	08 95       	ret

0000013e <crc_8_checkSum>:
 */ 
  //#include <avr/pgmspace.h>
  #include "crc_8_dallas.h"

  uint8_t crc_8_checkSum( uint8_t *mas, uint8_t Len )
  {
 13e:	fc 01       	movw	r30, r24
	  uint8_t i,dat,crc,fb,st_byt;
	  st_byt=0; crc=0;
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
		  for( i=0; i<8; i++) {  // счетчик битов в байте
			  fb = crc ^ dat;
			  fb &= 1;
			  crc >>= 1;
			  dat >>= 1;
			  if( fb == 1 ) crc ^= 0x8c; // полином
 144:	5c e8       	ldi	r21, 0x8C	; 140
  uint8_t crc_8_checkSum( uint8_t *mas, uint8_t Len )
  {
	  uint8_t i,dat,crc,fb,st_byt;
	  st_byt=0; crc=0;
	  do{
		  dat=mas[st_byt];
 146:	21 91       	ld	r18, Z+
 148:	98 e0       	ldi	r25, 0x08	; 8
		  for( i=0; i<8; i++) {  // счетчик битов в байте
			  fb = crc ^ dat;
 14a:	32 2f       	mov	r19, r18
 14c:	38 27       	eor	r19, r24
			  fb &= 1;
			  crc >>= 1;
 14e:	86 95       	lsr	r24
			  dat >>= 1;
 150:	26 95       	lsr	r18
			  if( fb == 1 ) crc ^= 0x8c; // полином
 152:	30 fd       	sbrc	r19, 0
 154:	85 27       	eor	r24, r21
 156:	91 50       	subi	r25, 0x01	; 1
  {
	  uint8_t i,dat,crc,fb,st_byt;
	  st_byt=0; crc=0;
	  do{
		  dat=mas[st_byt];
		  for( i=0; i<8; i++) {  // счетчик битов в байте
 158:	c1 f7       	brne	.-16     	; 0x14a <crc_8_checkSum+0xc>
			  fb &= 1;
			  crc >>= 1;
			  dat >>= 1;
			  if( fb == 1 ) crc ^= 0x8c; // полином
		  }
		  st_byt++;
 15a:	4f 5f       	subi	r20, 0xFF	; 255
	  } while( st_byt < Len ); // счетчик байтов в массиве
 15c:	46 17       	cp	r20, r22
 15e:	98 f3       	brcs	.-26     	; 0x146 <crc_8_checkSum+0x8>
	  return crc;
  }
 160:	08 95       	ret

00000162 <ds18b20_read_byte>:

// Read a byte from the sensor
uint8_t ds18b20_read_byte(void)
{ 
	uint8_t i = 0,data = 0;
	DQ_OUT;
 162:	b8 9a       	sbi	0x17, 0	; 23
 164:	98 e0       	ldi	r25, 0x08	; 8


// Read a byte from the sensor
uint8_t ds18b20_read_byte(void)
{ 
	uint8_t i = 0,data = 0;
 166:	80 e0       	ldi	r24, 0x00	; 0
	DQ_OUT;
	for (i=8; i>0; --i)
	{ C_DQ ;
 168:	c0 98       	cbi	0x18, 0	; 24
		data >>= 1;
 16a:	86 95       	lsr	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	24 e0       	ldi	r18, 0x04	; 4
 16e:	2a 95       	dec	r18
 170:	f1 f7       	brne	.-4      	; 0x16e <ds18b20_read_byte+0xc>
		_delay_us(3);
		S_DQ;
 172:	c0 9a       	sbi	0x18, 0	; 24
		DQ_IN;
 174:	b8 98       	cbi	0x17, 0	; 23
 176:	20 e1       	ldi	r18, 0x10	; 16
 178:	2a 95       	dec	r18
 17a:	f1 f7       	brne	.-4      	; 0x178 <ds18b20_read_byte+0x16>
		_delay_us(12);
		if(DQ)
 17c:	b0 99       	sbic	0x16, 0	; 22
		data |= 0x80;
 17e:	80 68       	ori	r24, 0x80	; 128
		DQ_OUT;
 180:	b8 9a       	sbi	0x17, 0	; 23
		S_DQ;
 182:	c0 9a       	sbi	0x18, 0	; 24
 184:	2c e3       	ldi	r18, 0x3C	; 60
 186:	2a 95       	dec	r18
 188:	f1 f7       	brne	.-4      	; 0x186 <ds18b20_read_byte+0x24>
 18a:	26 e0       	ldi	r18, 0x06	; 6
 18c:	2a 95       	dec	r18
 18e:	f1 f7       	brne	.-4      	; 0x18c <ds18b20_read_byte+0x2a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <ds18b20_read_byte+0x30>
 192:	91 50       	subi	r25, 0x01	; 1
// Read a byte from the sensor
uint8_t ds18b20_read_byte(void)
{ 
	uint8_t i = 0,data = 0;
	DQ_OUT;
	for (i=8; i>0; --i)
 194:	49 f7       	brne	.-46     	; 0x168 <ds18b20_read_byte+0x6>
		S_DQ;
		_delay_us(45);
		_delay_us(5);
	}
	return(data);
}
 196:	08 95       	ret

00000198 <ds18b20_write_command>:

// Write a command to the sensor
void ds18b20_write_command(uint8_t data)
{ uint8_t  i;
 198:	98 e0       	ldi	r25, 0x08	; 8
	for(i=8; i>0; --i)
	{ C_DQ;
 19a:	c0 98       	cbi	0x18, 0	; 24
 19c:	24 e1       	ldi	r18, 0x14	; 20
 19e:	2a 95       	dec	r18
 1a0:	f1 f7       	brne	.-4      	; 0x19e <ds18b20_write_command+0x6>
		_delay_us(15);
		if(data & 0x01)
 1a2:	80 ff       	sbrs	r24, 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <ds18b20_write_command+0x12>
		S_DQ;
 1a6:	c0 9a       	sbi	0x18, 0	; 24
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <ds18b20_write_command+0x14>
		else
		C_DQ;
 1aa:	c0 98       	cbi	0x18, 0	; 24
 1ac:	2c e3       	ldi	r18, 0x3C	; 60
 1ae:	2a 95       	dec	r18
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <ds18b20_write_command+0x16>
		_delay_us(45);
		data >>= 1;
 1b2:	86 95       	lsr	r24
		S_DQ;
 1b4:	c0 9a       	sbi	0x18, 0	; 24
 1b6:	22 e0       	ldi	r18, 0x02	; 2
 1b8:	2a 95       	dec	r18
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <ds18b20_write_command+0x20>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <ds18b20_write_command+0x26>
 1be:	91 50       	subi	r25, 0x01	; 1
}

// Write a command to the sensor
void ds18b20_write_command(uint8_t data)
{ uint8_t  i;
	for(i=8; i>0; --i)
 1c0:	61 f7       	brne	.-40     	; 0x19a <ds18b20_write_command+0x2>
		_delay_us(45);
		data >>= 1;
		S_DQ;
		_delay_us(2);
	}
}
 1c2:	08 95       	ret

000001c4 <ds18b20_init>:
 

// Start transaction with 1-wire line.
void ds18b20_init(void)
{ 
	DQ_OUT;
 1c4:	b8 9a       	sbi	0x17, 0	; 23
	C_DQ ;
 1c6:	c0 98       	cbi	0x18, 0	; 24
 1c8:	87 e5       	ldi	r24, 0x57	; 87
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <ds18b20_init+0x8>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <ds18b20_init+0xe>
 1d2:	00 00       	nop
	_delay_us(600);
	S_DQ;
 1d4:	c0 9a       	sbi	0x18, 0	; 24
 1d6:	92 e4       	ldi	r25, 0x42	; 66
 1d8:	9a 95       	dec	r25
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <ds18b20_init+0x14>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <ds18b20_init+0x1a>
	_delay_us(50);
	DQ_IN;
 1de:	b8 98       	cbi	0x17, 0	; 23
	while(DQ);
 1e0:	b0 99       	sbic	0x16, 0	; 22
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <ds18b20_init+0x1c>
 1e4:	8f ee       	ldi	r24, 0xEF	; 239
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <ds18b20_init+0x24>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <ds18b20_init+0x2a>
 1ee:	00 00       	nop
	_delay_us(240);
	DQ_OUT;
 1f0:	b8 9a       	sbi	0x17, 0	; 23
	S_DQ;
 1f2:	c0 9a       	sbi	0x18, 0	; 24
 1f4:	8b e2       	ldi	r24, 0x2B	; 43
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <ds18b20_init+0x34>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <ds18b20_init+0x3a>
 1fe:	00 00       	nop
 200:	08 95       	ret

00000202 <ds18b20_get_temp>:
		S_DQ;
		_delay_us(2);
	}
}

uint8_t ds18b20_get_temp(){	
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
// Read value from the sensor
inline uint8_t ds18b20_read_temp(void)
{ 
    

	ds18b20_init();
 206:	de df       	rcall	.-68     	; 0x1c4 <ds18b20_init>
	// Convert
	ds18b20_write_command(SKIP_ROM);
 208:	8c ec       	ldi	r24, 0xCC	; 204
 20a:	c6 df       	rcall	.-116    	; 0x198 <ds18b20_write_command>
	ds18b20_write_command(TEMP_MEASURE);
 20c:	84 e4       	ldi	r24, 0x44	; 68
 20e:	c4 df       	rcall	.-120    	; 0x198 <ds18b20_write_command>
	ds18b20_init();
 210:	d9 df       	rcall	.-78     	; 0x1c4 <ds18b20_init>
	// Read Scratch memory area
	ds18b20_write_command(SKIP_ROM);
 212:	8c ec       	ldi	r24, 0xCC	; 204
 214:	c1 df       	rcall	.-126    	; 0x198 <ds18b20_write_command>
	ds18b20_write_command(READ_SCRATCHPAD);
 216:	8e eb       	ldi	r24, 0xBE	; 190
 218:	bf df       	rcall	.-130    	; 0x198 <ds18b20_write_command>
	memory[0] = ds18b20_read_byte(); //LSB
 21a:	a3 df       	rcall	.-186    	; 0x162 <ds18b20_read_byte>
 21c:	cb e8       	ldi	r28, 0x8B	; 139
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	88 83       	st	Y, r24
	memory[1] = ds18b20_read_byte(); //MSB
 222:	9f df       	rcall	.-194    	; 0x162 <ds18b20_read_byte>
 224:	89 83       	std	Y+1, r24	; 0x01
	memory[2] = ds18b20_read_byte();
 226:	9d df       	rcall	.-198    	; 0x162 <ds18b20_read_byte>
 228:	8a 83       	std	Y+2, r24	; 0x02
	memory[3] = ds18b20_read_byte();
 22a:	9b df       	rcall	.-202    	; 0x162 <ds18b20_read_byte>
 22c:	8b 83       	std	Y+3, r24	; 0x03
	memory[4] = ds18b20_read_byte();
 22e:	99 df       	rcall	.-206    	; 0x162 <ds18b20_read_byte>
 230:	8c 83       	std	Y+4, r24	; 0x04
	memory[5] = ds18b20_read_byte();
 232:	97 df       	rcall	.-210    	; 0x162 <ds18b20_read_byte>
 234:	8d 83       	std	Y+5, r24	; 0x05
	memory[6] = ds18b20_read_byte();
 236:	95 df       	rcall	.-214    	; 0x162 <ds18b20_read_byte>
 238:	8e 83       	std	Y+6, r24	; 0x06
	memory[7] = ds18b20_read_byte();
 23a:	93 df       	rcall	.-218    	; 0x162 <ds18b20_read_byte>
 23c:	8f 83       	std	Y+7, r24	; 0x07
	memory[8] = ds18b20_read_byte();
 23e:	91 df       	rcall	.-222    	; 0x162 <ds18b20_read_byte>
 240:	88 87       	std	Y+8, r24	; 0x08
	if(crc_8_checkSum(memory,MEMORY_LENGTH)==0){
 242:	69 e0       	ldi	r22, 0x09	; 9
 244:	ce 01       	movw	r24, r28
 246:	7b df       	rcall	.-266    	; 0x13e <crc_8_checkSum>
 248:	81 11       	cpse	r24, r1
 24a:	11 c0       	rjmp	.+34     	; 0x26e <ds18b20_get_temp+0x6c>
		t = memory[1];
		t <<= 8;
		t = t|memory[0];
		t>>=4;
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	98 2f       	mov	r25, r24
 252:	88 27       	eor	r24, r24
 254:	28 81       	ld	r18, Y
 256:	82 2b       	or	r24, r18
 258:	92 95       	swap	r25
 25a:	82 95       	swap	r24
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	89 27       	eor	r24, r25
 260:	9f 70       	andi	r25, 0x0F	; 15
 262:	89 27       	eor	r24, r25
 264:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 268:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 26c:	02 c0       	rjmp	.+4      	; 0x272 <ds18b20_get_temp+0x70>
		return(t);
	}
	return(t);
 26e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
	}
}

uint8_t ds18b20_get_temp(){	
	return ds18b20_read_temp();
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <keyboard_refresh>:
uint8_t buttons = 0;

task_t _task;
uint8_t _keyboard_state = STATE_SCAN;
//if (!(PINB & (1<<PINB6)))
void keyboard_refresh(task_t task){
 278:	fc 01       	movw	r30, r24
	switch(_keyboard_state){
 27a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <_keyboard_state>
 27e:	99 23       	and	r25, r25
 280:	19 f0       	breq	.+6      	; 0x288 <keyboard_refresh+0x10>
 282:	91 30       	cpi	r25, 0x01	; 1
 284:	01 f1       	breq	.+64     	; 0x2c6 <keyboard_refresh+0x4e>
 286:	08 95       	ret
		case STATE_SCAN:
		if(PINB & (1<<PINB1)){
 288:	b1 9b       	sbis	0x16, 1	; 22
 28a:	08 c0       	rjmp	.+16     	; 0x29c <keyboard_refresh+0x24>
			buttons  |= UP;
 28c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 290:	82 60       	ori	r24, 0x02	; 2
 292:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buttons>
			_keyboard_state= STATE_FIX;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_keyboard_state>
		}
		if(PINB & (1<<PINB2)){
 29c:	b2 9b       	sbis	0x16, 2	; 22
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <keyboard_refresh+0x38>
			buttons  |= DOWN;
 2a0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 2a4:	84 60       	ori	r24, 0x04	; 4
 2a6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buttons>
			_keyboard_state= STATE_FIX;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_keyboard_state>
		}
		if(PINB & (1<<PINB3)){
 2b0:	b3 9b       	sbis	0x16, 3	; 22
 2b2:	2b c0       	rjmp	.+86     	; 0x30a <keyboard_refresh+0x92>
			buttons  |= SET;
 2b4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 2b8:	88 60       	ori	r24, 0x08	; 8
 2ba:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buttons>
			_keyboard_state= STATE_FIX;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_keyboard_state>
 2c4:	08 95       	ret
		}
		break;
		case STATE_FIX:
			if(buttons & UP){
 2c6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 2ca:	81 ff       	sbrs	r24, 1
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <keyboard_refresh+0x66>
				task->up = 1;
 2ce:	80 81       	ld	r24, Z
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	80 83       	st	Z, r24
				buttons  &=~UP;
 2d4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buttons>
				}
			if(buttons & DOWN){
 2de:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 2e2:	82 ff       	sbrs	r24, 2
 2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <keyboard_refresh+0x7a>
				buttons  &=~DOWN;
 2e6:	8b 7f       	andi	r24, 0xFB	; 251
 2e8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buttons>
				task->down = 1;
 2ec:	80 81       	ld	r24, Z
 2ee:	82 60       	ori	r24, 0x02	; 2
 2f0:	80 83       	st	Z, r24
				}
			if(buttons & SET){
 2f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <buttons>
 2f6:	83 ff       	sbrs	r24, 3
 2f8:	06 c0       	rjmp	.+12     	; 0x306 <keyboard_refresh+0x8e>
				buttons  &=~SET;
 2fa:	87 7f       	andi	r24, 0xF7	; 247
 2fc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <buttons>
				task->set = 1;
 300:	80 81       	ld	r24, Z
 302:	84 60       	ori	r24, 0x04	; 4
 304:	80 83       	st	Z, r24
				}
			_keyboard_state= STATE_SCAN;
 306:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <_keyboard_state>
 30a:	08 95       	ret

0000030c <main_init>:
	}
	return 0;
}

void main_init(){
	cli();
 30c:	f8 94       	cli
	DDRB = 0x00;
 30e:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x00;
 310:	18 ba       	out	0x18, r1	; 24

	DDRD |= 1<<CS|1<<BUZZER;
 312:	81 b3       	in	r24, 0x11	; 17
 314:	84 62       	ori	r24, 0x24	; 36
 316:	81 bb       	out	0x11, r24	; 17
	PORTD |= 1<<CS|0<<BUZZER;
 318:	92 9a       	sbi	0x12, 2	; 18
	ACSR |=1<<ACD; // отключение АЦП
 31a:	47 9a       	sbi	0x08, 7	; 8
	//init_pin_change_interrupts();
	led_init();
 31c:	bd de       	rcall	.-646    	; 0x98 <led_init>
	//timer0Init();
	timer_init_soft_timer();
 31e:	af d0       	rcall	.+350    	; 0x47e <timer_init_soft_timer>
	_chatter_timer = timer_create(CHATTER_PERIOD);
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	d4 d0       	rcall	.+424    	; 0x4ce <timer_create>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <_chatter_timer+0x1>
 32c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <_chatter_timer>
	_poll_timer = timer_create(POLL_TIMEOUT);
 330:	84 e6       	ldi	r24, 0x64	; 100
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	cc d0       	rcall	.+408    	; 0x4ce <timer_create>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <_poll_timer+0x1>
 33c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <_poll_timer>
	_buzz_timer = timer_create(BUZZ_PERIOD);
 340:	84 ef       	ldi	r24, 0xF4	; 244
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	c4 d0       	rcall	.+392    	; 0x4ce <timer_create>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <_buzz_timer+0x1>
 34c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <_buzz_timer>
	//beep();
	sei();
 350:	78 94       	sei
 352:	08 95       	ret

00000354 <main>:
size_t _poll_timer = 0;
size_t _buzz_timer = 0;
size_t _chatter_timer = 0;

int main(void)
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	1f 92       	push	r1
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	dd 27       	eor	r29, r29
    struct tasks task_list;
	settingTemp = NORMAL_TEMP;
 35e:	8e e1       	ldi	r24, 0x1E	; 30
 360:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <settingTemp>
	state = waiting;
 364:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <state>
	temperature = 0;
 368:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <temperature>
	main_init();
 36c:	cf df       	rcall	.-98     	; 0x30c <main_init>
				state = setting;
				task_list.set = 0;
			}
			led_show_value(temperature, CELCIUS_SYMBOL);
			if(temperature > settingTemp){
				state = alarm;
 36e:	68 94       	set
 370:	ff 24       	eor	r15, r15
 372:	f1 f8       	bld	r15, 1
		}

		switch(state){
			case waiting:
			if(task_list.set){			
				state = setting;
 374:	11 e0       	ldi	r17, 0x01	; 1
			break;
			case alarm:
			//PORTD |= 1<<BUZZER;
			led_show_value(temperature,ALARM_SYMBOL);
			if(task_list.set){
				state = ack_alarm;
 376:	03 e0       	ldi	r16, 0x03	; 3
	state = waiting;
	temperature = 0;
	main_init();
	while (1)
	{
		if(timer_check(_poll_timer)==TIMER_OUT){
 378:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <_poll_timer>
 37c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_poll_timer+0x1>
 380:	cb d0       	rcall	.+406    	; 0x518 <timer_check>
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	51 f4       	brne	.+20     	; 0x39a <main+0x46>
			temperature = ds18b20_get_temp();
 386:	3d df       	rcall	.-390    	; 0x202 <ds18b20_get_temp>
 388:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <temperature>
			timer_restart(_poll_timer,POLL_TIMEOUT);
 38c:	64 e6       	ldi	r22, 0x64	; 100
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <_poll_timer>
 394:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <_poll_timer+0x1>
 398:	da d0       	rcall	.+436    	; 0x54e <timer_restart>
		}

		if(timer_check(_chatter_timer)==TIMER_OUT){
 39a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_chatter_timer>
 39e:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_chatter_timer+0x1>
 3a2:	ba d0       	rcall	.+372    	; 0x518 <timer_check>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	51 f4       	brne	.+20     	; 0x3bc <main+0x68>
			keyboard_refresh(&task_list);
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	65 df       	rcall	.-310    	; 0x278 <keyboard_refresh>
			timer_restart(_chatter_timer,CHATTER_PERIOD);
 3ae:	64 e6       	ldi	r22, 0x64	; 100
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_chatter_timer>
 3b6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_chatter_timer+0x1>
 3ba:	c9 d0       	rcall	.+402    	; 0x54e <timer_restart>
		}

		switch(state){
 3bc:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <state>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	d9 f0       	breq	.+54     	; 0x3fa <main+0xa6>
 3c4:	30 f0       	brcs	.+12     	; 0x3d2 <main+0x7e>
 3c6:	82 30       	cpi	r24, 0x02	; 2
 3c8:	d1 f1       	breq	.+116    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <main+0x7c>
 3ce:	43 c0       	rjmp	.+134    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3d0:	d3 cf       	rjmp	.-90     	; 0x378 <main+0x24>
			case waiting:
			if(task_list.set){			
 3d2:	89 81       	ldd	r24, Y+1	; 0x01
 3d4:	82 ff       	sbrs	r24, 2
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <main+0x8c>
				state = setting;
 3d8:	10 93 95 00 	sts	0x0095, r17	; 0x800095 <state>
				task_list.set = 0;
 3dc:	8b 7f       	andi	r24, 0xFB	; 251
 3de:	89 83       	std	Y+1, r24	; 0x01
			}
			led_show_value(temperature, CELCIUS_SYMBOL);
 3e0:	63 e6       	ldi	r22, 0x63	; 99
 3e2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <temperature>
 3e6:	63 de       	rcall	.-826    	; 0xae <led_show_value>
			if(temperature > settingTemp){
 3e8:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <temperature>
 3ec:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <settingTemp>
 3f0:	89 17       	cp	r24, r25
 3f2:	10 f6       	brcc	.-124    	; 0x378 <main+0x24>
				state = alarm;
 3f4:	f0 92 95 00 	sts	0x0095, r15	; 0x800095 <state>
 3f8:	bf cf       	rjmp	.-130    	; 0x378 <main+0x24>
			}
			break;
			case setting:
			if(task_list.up){
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	80 ff       	sbrs	r24, 0
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				settingTemp++;
 400:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <settingTemp>
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <settingTemp>
				task_list.up = 0;
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	8e 7f       	andi	r24, 0xFE	; 254
 40e:	89 83       	std	Y+1, r24	; 0x01
			}
			if(task_list.down){
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	81 ff       	sbrs	r24, 1
 414:	08 c0       	rjmp	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
				settingTemp--;
 416:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <settingTemp>
 41a:	81 50       	subi	r24, 0x01	; 1
 41c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <settingTemp>
				task_list.down = 0;
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	8d 7f       	andi	r24, 0xFD	; 253
 424:	89 83       	std	Y+1, r24	; 0x01
			}
			if(task_list.set){
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	82 ff       	sbrs	r24, 2
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				state = waiting;
 42c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <state>
				task_list.set = 0;
 430:	8b 7f       	andi	r24, 0xFB	; 251
 432:	89 83       	std	Y+1, r24	; 0x01
			}
			led_show_value(settingTemp,SETTING_SYMBOL);
 434:	6d e1       	ldi	r22, 0x1D	; 29
 436:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <settingTemp>
 43a:	39 de       	rcall	.-910    	; 0xae <led_show_value>
			break;
 43c:	9d cf       	rjmp	.-198    	; 0x378 <main+0x24>
			case alarm:
			//PORTD |= 1<<BUZZER;
			led_show_value(temperature,ALARM_SYMBOL);
 43e:	67 e7       	ldi	r22, 0x77	; 119
 440:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <temperature>
 444:	34 de       	rcall	.-920    	; 0xae <led_show_value>
			if(task_list.set){
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	82 ff       	sbrs	r24, 2
 44a:	96 cf       	rjmp	.-212    	; 0x378 <main+0x24>
				state = ack_alarm;
 44c:	00 93 95 00 	sts	0x0095, r16	; 0x800095 <state>
				task_list.set = 0;
 450:	8b 7f       	andi	r24, 0xFB	; 251
 452:	89 83       	std	Y+1, r24	; 0x01
 454:	91 cf       	rjmp	.-222    	; 0x378 <main+0x24>
			}
			break;
			case ack_alarm:
			//PORTD &= ~(1<<BUZZER);
			led_show_value(temperature,ALARM_SYMBOL);
 456:	67 e7       	ldi	r22, 0x77	; 119
 458:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <temperature>
 45c:	28 de       	rcall	.-944    	; 0xae <led_show_value>
			if(temperature < settingTemp){
 45e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <temperature>
 462:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <settingTemp>
 466:	98 17       	cp	r25, r24
 468:	10 f4       	brcc	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
				state = waiting;
 46a:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <state>
			}
			if(task_list.set){
 46e:	89 81       	ldd	r24, Y+1	; 0x01
 470:	82 ff       	sbrs	r24, 2
 472:	82 cf       	rjmp	.-252    	; 0x378 <main+0x24>
				state = setting;
 474:	10 93 95 00 	sts	0x0095, r17	; 0x800095 <state>
				task_list.set = 0;
 478:	8b 7f       	andi	r24, 0xFB	; 251
 47a:	89 83       	std	Y+1, r24	; 0x01
 47c:	7d cf       	rjmp	.-262    	; 0x378 <main+0x24>

0000047e <timer_init_soft_timer>:
{
	uint8_t saveSreg = SREG;
	cli();
	timers[timer].isSet = TIMER_OFF;
	timers[timer].time = 0;
	SREG = saveSreg;
 47e:	2f b7       	in	r18, 0x3f	; 63
 480:	f8 94       	cli
 482:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <isInit>
 486:	81 11       	cpse	r24, r1
 488:	20 c0       	rjmp	.+64     	; 0x4ca <timer_init_soft_timer+0x4c>
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	fc 01       	movw	r30, r24
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	e8 0f       	add	r30, r24
 496:	f9 1f       	adc	r31, r25
 498:	e4 59       	subi	r30, 0x94	; 148
 49a:	ff 4f       	sbci	r31, 0xFF	; 255
 49c:	12 82       	std	Z+2, r1	; 0x02
 49e:	11 82       	std	Z+1, r1	; 0x01
 4a0:	10 82       	st	Z, r1
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	8a 30       	cpi	r24, 0x0A	; 10
 4a6:	91 05       	cpc	r25, r1
 4a8:	91 f7       	brne	.-28     	; 0x48e <timer_init_soft_timer+0x10>
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	8a bb       	out	0x1a, r24	; 26
 4ae:	83 b5       	in	r24, 0x23	; 35
 4b0:	81 60       	ori	r24, 0x01	; 1
 4b2:	83 bd       	out	0x23, r24	; 35
 4b4:	82 ec       	ldi	r24, 0xC2	; 194
 4b6:	82 bf       	out	0x32, r24	; 50
 4b8:	83 b7       	in	r24, 0x33	; 51
 4ba:	83 60       	ori	r24, 0x03	; 3
 4bc:	83 bf       	out	0x33, r24	; 51
 4be:	89 b7       	in	r24, 0x39	; 57
 4c0:	82 60       	ori	r24, 0x02	; 2
 4c2:	89 bf       	out	0x39, r24	; 57
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <isInit>
 4ca:	2f bf       	out	0x3f, r18	; 63
 4cc:	08 95       	ret

000004ce <timer_create>:
 4ce:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 4d2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 4d6:	2a 30       	cpi	r18, 0x0A	; 10
 4d8:	31 05       	cpc	r19, r1
 4da:	e1 f0       	breq	.+56     	; 0x514 <timer_create+0x46>
 4dc:	4f b7       	in	r20, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 4e4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	3f 4f       	sbci	r19, 0xFF	; 255
 4ec:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__data_start+0x1>
 4f0:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__data_start>
 4f4:	f9 01       	movw	r30, r18
 4f6:	ee 0f       	add	r30, r30
 4f8:	ff 1f       	adc	r31, r31
 4fa:	2e 0f       	add	r18, r30
 4fc:	3f 1f       	adc	r19, r31
 4fe:	f9 01       	movw	r30, r18
 500:	e4 59       	subi	r30, 0x94	; 148
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	91 83       	std	Z+1, r25	; 0x01
 506:	80 83       	st	Z, r24
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	82 83       	std	Z+2, r24	; 0x02
 50c:	4f bf       	out	0x3f, r20	; 63
 50e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 512:	08 95       	ret
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret

00000518 <timer_check>:
 518:	fc 01       	movw	r30, r24
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	e8 0f       	add	r30, r24
 520:	f9 1f       	adc	r31, r25
 522:	e4 59       	subi	r30, 0x94	; 148
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	22 81       	ldd	r18, Z+2	; 0x02
 528:	21 30       	cpi	r18, 0x01	; 1
 52a:	79 f4       	brne	.+30     	; 0x54a <timer_check+0x32>
 52c:	fc 01       	movw	r30, r24
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	8e 0f       	add	r24, r30
 534:	9f 1f       	adc	r25, r31
 536:	fc 01       	movw	r30, r24
 538:	e4 59       	subi	r30, 0x94	; 148
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	20 81       	ld	r18, Z
 53e:	31 81       	ldd	r19, Z+1	; 0x01
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	23 2b       	or	r18, r19
 544:	19 f0       	breq	.+6      	; 0x54c <timer_check+0x34>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	08 95       	ret
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	08 95       	ret

0000054e <timer_restart>:
 54e:	2f b7       	in	r18, 0x3f	; 63
 550:	f8 94       	cli
 552:	fc 01       	movw	r30, r24
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	8e 0f       	add	r24, r30
 55a:	9f 1f       	adc	r25, r31
 55c:	fc 01       	movw	r30, r24
 55e:	e4 59       	subi	r30, 0x94	; 148
 560:	ff 4f       	sbci	r31, 0xFF	; 255
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	82 83       	std	Z+2, r24	; 0x02
 566:	71 83       	std	Z+1, r23	; 0x01
 568:	60 83       	st	Z, r22
 56a:	2f bf       	out	0x3f, r18	; 63
 56c:	08 95       	ret

0000056e <__vector_6>:
}

ISR(TIMER0_OVF_vect){
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	TCNT0 = INIT;
 588:	82 ec       	ldi	r24, 0xC2	; 194
 58a:	82 bf       	out	0x32, r24	; 50
	for (uint16_t i = 0; i <= current_timer; i++)
 58c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__data_start>
 590:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__data_start+0x1>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(timers[i].isSet == TIMER_ON){
 598:	fc 01       	movw	r30, r24
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	e8 0f       	add	r30, r24
 5a0:	f9 1f       	adc	r31, r25
 5a2:	e4 59       	subi	r30, 0x94	; 148
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	22 81       	ldd	r18, Z+2	; 0x02
 5a8:	21 30       	cpi	r18, 0x01	; 1
 5aa:	c1 f4       	brne	.+48     	; 0x5dc <__vector_6+0x6e>
			if (timers[i].time == 0)
 5ac:	fc 01       	movw	r30, r24
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	e8 0f       	add	r30, r24
 5b4:	f9 1f       	adc	r31, r25
 5b6:	e4 59       	subi	r30, 0x94	; 148
 5b8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba:	20 81       	ld	r18, Z
 5bc:	31 81       	ldd	r19, Z+1	; 0x01
 5be:	23 2b       	or	r18, r19
 5c0:	69 f0       	breq	.+26     	; 0x5dc <__vector_6+0x6e>
				continue;
			timers[i].time--;			
 5c2:	fc 01       	movw	r30, r24
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	e8 0f       	add	r30, r24
 5ca:	f9 1f       	adc	r31, r25
 5cc:	e4 59       	subi	r30, 0x94	; 148
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	20 81       	ld	r18, Z
 5d2:	31 81       	ldd	r19, Z+1	; 0x01
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	31 09       	sbc	r19, r1
 5d8:	31 83       	std	Z+1, r19	; 0x01
 5da:	20 83       	st	Z, r18
	SREG = saveSreg;
}

ISR(TIMER0_OVF_vect){
	TCNT0 = INIT;
	for (uint16_t i = 0; i <= current_timer; i++)
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	48 17       	cp	r20, r24
 5e0:	59 07       	cpc	r21, r25
 5e2:	d0 f6       	brcc	.-76     	; 0x598 <__vector_6+0x2a>
			if (timers[i].time == 0)
				continue;
			timers[i].time--;			
		}
	}
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	9f 91       	pop	r25
 5ea:	8f 91       	pop	r24
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__udivmodqi4>:
 5fe:	99 1b       	sub	r25, r25
 600:	79 e0       	ldi	r23, 0x09	; 9
 602:	04 c0       	rjmp	.+8      	; 0x60c <__udivmodqi4_ep>

00000604 <__udivmodqi4_loop>:
 604:	99 1f       	adc	r25, r25
 606:	96 17       	cp	r25, r22
 608:	08 f0       	brcs	.+2      	; 0x60c <__udivmodqi4_ep>
 60a:	96 1b       	sub	r25, r22

0000060c <__udivmodqi4_ep>:
 60c:	88 1f       	adc	r24, r24
 60e:	7a 95       	dec	r23
 610:	c9 f7       	brne	.-14     	; 0x604 <__udivmodqi4_loop>
 612:	80 95       	com	r24
 614:	08 95       	ret

00000616 <__divmodhi4>:
 616:	97 fb       	bst	r25, 7
 618:	07 2e       	mov	r0, r23
 61a:	16 f4       	brtc	.+4      	; 0x620 <__divmodhi4+0xa>
 61c:	00 94       	com	r0
 61e:	06 d0       	rcall	.+12     	; 0x62c <__divmodhi4_neg1>
 620:	77 fd       	sbrc	r23, 7
 622:	08 d0       	rcall	.+16     	; 0x634 <__divmodhi4_neg2>
 624:	0b d0       	rcall	.+22     	; 0x63c <__udivmodhi4>
 626:	07 fc       	sbrc	r0, 7
 628:	05 d0       	rcall	.+10     	; 0x634 <__divmodhi4_neg2>
 62a:	3e f4       	brtc	.+14     	; 0x63a <__divmodhi4_exit>

0000062c <__divmodhi4_neg1>:
 62c:	90 95       	com	r25
 62e:	81 95       	neg	r24
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	08 95       	ret

00000634 <__divmodhi4_neg2>:
 634:	70 95       	com	r23
 636:	61 95       	neg	r22
 638:	7f 4f       	sbci	r23, 0xFF	; 255

0000063a <__divmodhi4_exit>:
 63a:	08 95       	ret

0000063c <__udivmodhi4>:
 63c:	aa 1b       	sub	r26, r26
 63e:	bb 1b       	sub	r27, r27
 640:	51 e1       	ldi	r21, 0x11	; 17
 642:	07 c0       	rjmp	.+14     	; 0x652 <__udivmodhi4_ep>

00000644 <__udivmodhi4_loop>:
 644:	aa 1f       	adc	r26, r26
 646:	bb 1f       	adc	r27, r27
 648:	a6 17       	cp	r26, r22
 64a:	b7 07       	cpc	r27, r23
 64c:	10 f0       	brcs	.+4      	; 0x652 <__udivmodhi4_ep>
 64e:	a6 1b       	sub	r26, r22
 650:	b7 0b       	sbc	r27, r23

00000652 <__udivmodhi4_ep>:
 652:	88 1f       	adc	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	5a 95       	dec	r21
 658:	a9 f7       	brne	.-22     	; 0x644 <__udivmodhi4_loop>
 65a:	80 95       	com	r24
 65c:	90 95       	com	r25
 65e:	bc 01       	movw	r22, r24
 660:	cd 01       	movw	r24, r26
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
